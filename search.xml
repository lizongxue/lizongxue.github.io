<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[感恩-来自一位可敬的朋友]]></title>
    <url>%2F2099%2F03%2F11%2Fganenpengyou%2F</url>
    <content type="text"><![CDATA[黎明，虽然闹钟响时我会懊悔，会拉住棉被盖住头，但要感谢上苍，因为我能听得到。需知有好多人耳聋； 虽然我还是闭着眼睛，厌恶清晨的阳光，但我要感谢上苍，因为我能看到。需知有好多人眼瞎。 虽然我赖床不想起身，但感谢上苍我有能力站起来。需知有好多人终生睡在床上。 虽然这一天刚开始就一塌糊涂，袜子找不到，老婆早餐也未做，孩子又吵又闹，但感谢上苍，我有一个家。需知孤寂的人到处都是。 虽然我们的餐桌从来没有像食物杂志的图片那样，早餐也是拼拼凑凑，但要感谢上苍踢给我们食物。需知饥饿的人是那么多。 虽然我的工作枯燥无味，常常一肚子怨气，但要感谢上苍。因为我有工作的机会。需知失业的人好多好多。 虽然我常抱怨、感叹命运不好，但感谢上苍踢给了我生命。 有时候静静的想一想—“.活着真好”，看一看周围，原来我们生活在感恩的世界里。 回顾过去，展望未来，在内心深处充满感激：感激斥责我的人，因为他助长了我的定慧；感激绊倒我的人，因为他强化了我的能力；感激遗弃我的人，因为他教导我 学会了自立；感激欺骗我的人，因为他增进了我的见识；感激伤害我的人，因为他磨练了我的心态、、、、、、、感激所有使我坚强的人，使我度过了生活的每一 天。如今我终究大彻大悟：感谢+感激=感恩是人生工作和生活中永恒的定式。]]></content>
      <categories>
        <category>心情日记</category>
      </categories>
      <tags>
        <tag>情感</tag>
        <tag>感悟</tag>
        <tag>感恩</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[charles抓包工具的中文乱码解决方法]]></title>
    <url>%2F2019%2F02%2F12%2Fcharles%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E7%9A%84%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[charles是 MAC上最好用的抓包工具.charles 网上的参考文档已经很多,我就不再赘述啦.只是说说我在安装过程遇到的问题和解决方法,仅供参考. charles抓包的数据中的中文内容显示乱码,网上很多是通过修改 info.plist 文件解决的,点击这里查看解决方法:https://www.v2ex.com/t/255040 我在尝试以上方法后依然没有解决,翻遍 google, 前人之鉴的方法还是很多,只是茫茫网海中找到的也是很不容易的,这个方法大家可以参考下咯:https://www.cnblogs.com/grimm/p/7494688.html 1. 打开 charles 工具-&gt;Tools-&gt;rewrite-&gt;Enable rewrite,勾选. 2. 在 rewrite 界面下方的 sets 中进行添加设置项(sets-&gt;add): name:Charset Location: 不需要设置 Rules: Type选择&quot;Modify Header&quot;. where 选择&quot;Response&quot;. Match下的 name 是抓到的包中Content-Type,Value 填写包的 Content-Type后面的内容即可. replace下的 name 和 value 参考截图上的内容填写,就大功告成啦~~~ ![](https://images2015.cnblogs.com/blog/796220/201612/796220-20161216124648229-246666492.png) ![](https://images2015.cnblogs.com/blog/796220/201612/796220-20161216124123401-1279819438.png)]]></content>
  </entry>
  <entry>
    <title><![CDATA[忘记 iOS 的访问限制密码，如何找回或重设？]]></title>
    <url>%2F2019%2F01%2F20%2Fsssss%2F</url>
    <content type="text"><![CDATA[2018.11.08 最近更新的pinfinder，备份加密后可以破解iOS12的访问限制密码。具体操作步骤，待我有空再更新。急需破解的朋友可以去其网站下载，也可以与我私信联系。 -------------------------------------------------- 2018.10.12 重要提醒：目前此方法不适用于iOS12。建议加密备份后，再降级到iOS11及以下版本找回密码，再重新升级恢复备份。 如果聪明如你，找到新的方法，欢迎私信指教。 -------------------------------------------------- 2017.09.23更新了最方便操作的方法。 首先说结果： 我的 iPhone 5s（iOS 10.3.3未越狱）以及 iPad mini 4（iOS 11.0未越狱）的『访问限制密码』已经成功破解。不需要恢复iPhone系统、不需要恢复备份、不需要越狱，所以数据不会丢失一个字节。 此方法适用于：iOS 11/10/9/8/7/6/5 (iPhone, iPod &amp; iPad)。 其次说方法： 一、什么是访问限制？ 根据Apple中文官网的『iPhone使用手册』http://help.apple.com/iphone/9/?lang=zh-cn#/iph9b66575d5介绍： 您可以为部分应用和已购买的内容设定访问限制。例如，家长可以限制播放列表显示儿童不宜的音乐，或者不允许更改某些设置。使用访问限制功能以阻止使用特定应用、安装新的应用或者更改帐户或音量限制。打开访问限制： 前往“设置”&gt;“通用”&gt;“访问限制”，然后轻点“启用访问限制”。系统将要求您定义访问限制密码，更改所做的设置时将要求输入该密码。此密码可与解锁 iPhone 的密码不同。【重要事项】如果您忘记了访问限制密码，则必须恢复 iPhone 软件。请参阅恢复 iPhone。 由于『访问限制』密码只会在设置的时候进行验证，而且没有提示，如果自己不记录或者随意设置密码的话，时间一长，就很容易忘记。 二、苹果官网帮助 根据官网的方法需要恢复iPhone，并且重置为新iPhone，才能清除『访问限制密码』。所以iPhone中的所有数据都会丢失。如果通过恢复iPhone的iTunes备份，『访问限制密码』仍然与备份前一样，而且输入密码的错误次数仍然也记录着。 不过，可以通过无数次的尝试来猜密码，猜得次数达到6次左右，就需要等待一个小时才能再猜，这时恢复iTunes备份就可以恢复猜错的次数。 三、破解方法 1. 下载并安装iTunes - 立即下载 iTunes，（iOS 11.0必须安装iTunes 12.7版本）； 2. 将手机通过数据线插入电脑，iTunes会自动识别。点击如下图所示的手机图标； 3. 在手机摘要界面右边的『备份』选项『手动备份和恢复』中，点击『立即备份』，备份iPhone数据到本地电脑；注意： 不要勾选给左边选项『iPhone备份加密』； 如果手机资料非常多，需要很长时间备份；如果电脑磁盘空间不足，参考后面的解决方法； 4. Ｗin7系统：双击『计算机』，在路径中输入『%appdata%』（英文，建议复制），然后回车，然后依次打开文件夹『Apple Computer\MobileSync\Backup\』，如下图： 或者，打开『隐藏系统文件』的选项，然后直接打开目录『C:\Users\你的用户名\AppData\Roaming\Apple Computer\MobileSync\Backup\』 MacOS：/Users/你的登录账户名/Library/Application Support/MobileSync/Backup/ XP系统：C:\Documents and Settings\用户名\Application Data\Apple Computer\MobileSync\Backup 在Backup目录下面，会有一个一长串字符的文件夹，双击打开，然后找到文件夹『39』下面的文件『398bc9c2aeeab4cb0c12ada0f52eea12cf14f40b』； 5. 打开『开始菜单』-『所有程序』-『附件』-『记事本』，然后将文件『398bc9c2aeeab4cb0c12ada0f52eea12cf14f40b』拖入『记事本』程序中打开；如下图 MacOS直接用文本工具打开即可。 6. 打开网站Recover iOS7+ Restrictions Passcodes， 7. 将上图中长红框的字符串1（不包含空格），复制粘贴到网站的『RestrictionsPasswordKey:』对应的文本框1 中；将上图中短红框的字符串2（不包含空格），复制粘贴到网站的『RestrictionsPasswordSalt:』对应的文本框2中，然后点击『Search for Code』； 8. 程序会从0000开始逐一递增进行『密码穷举』一直到找到密码时，弹出对话框提示即『访问限制密码』。设置的密码数字越大，搜索的时间越长。 此破解方法是通过JavaScript脚本进行计算破解的，所以运行的速度与本地电脑的配置有关。 也可以依此打开多个页面，将0000~9999分段进行搜索，从而提高搜索的速度。 · 当你解开密码的那一刹那，如果心情激动地想给楼主发红包，欢迎私信与我联系。· 如果遇到解决不了的问题，或者不会操作，也可以私信与我联系。· 如果这个方法对你有帮助，欢迎点赞。也许能帮助更多的人。 最后说经验： 此方法来源于Google。『访问限制』密码是根据pbkdf2-hmac-sha1加密算法，进行加密的。所以只要找到了上面的密钥，就可以破解。也可以用其它的编程语言进行破解。 Go语言编写的pinfinder：gwatts/pinfinder Python语言编写的TwizzyIndy/ios_restrictions__tool 总结： 在解决相对有『技术』难度的问题，千万不要用『百度』，而要优先用Google英文搜索。百度会浪费许多时间，而且很容易让人挫败。 iPhone的安全机制相对较严格，所以密码千万不能随便填，写了也不要随意忘记。 数据备份最重要，在恢复iPhone前，一定要多次备份数据，并弄清楚备份的细节，比如：备份加密，不加密还是会丢失数据。 一定要定期进行iPhone数据备份。]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[安装Scrapy 报错]]></title>
    <url>%2F2019%2F01%2F08%2F%E5%AE%89%E8%A3%85Scrapy-%E6%8A%A5%E9%94%99%2F</url>
    <content type="text"><![CDATA[Could not find a version that satisfies the requirement Twisted&gt;=13.1.0 (from Scrapy) (from versions: )No matching distribution found for Twisted&gt;=13.1.0 (from Scrapy) 原因是没有安装Twisted wget https://pypi.python.org/packages/source/T/Twisted/Twisted-15.2.1.tar.bz2 tar -xjvf Twisted-15.2.1.tar.bz2cd Twisted-15.2.1 python setup.py install作者：snowpay来源：CSDN原文：https://blog.csdn.net/snowpay/article/details/64919647版权声明：本文为博主原创文章，转载请附上博文链接！]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[coreseek搜索中文为0 怎么解决 看我原创]]></title>
    <url>%2F2019%2F01%2F02%2Fcoreseek%E6%90%9C%E7%B4%A2%E4%B8%AD%E6%96%87%E4%B8%BA0-%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3-%E7%9C%8B%E6%88%91%E5%8E%9F%E5%88%9B%2F</url>
    <content type="text"><![CDATA[/usr/local/src/coreseek-4.1-beta/testpack/api/sphinxapi.php这个搜索确实为0 /usr/local/src/coreseek-4.1-beta/csft-4.1/api/sphinxapi.php这个就可以了，搞了好几天才找到原来是这个家伙出问题了]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[linux常用命令]]></title>
    <url>%2F2019%2F01%2F01%2Flinux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[linux命令： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586批量替换某文件夹的内容，把里面的，替换成现在的。sed -i "s/\/home\/httpd\/sites\/work\/tiantian_show\/Application\/cron\//\/web\/tiantian_show\/Application\/cron\//g" `grep "/home/httpd/sites/work/tiantian_show/Application/cron/" -rl /home/httpd/sites/work/tiantian_show/Application/cron/`替换某个文件的内容sed -i "s/promotion_show/tiantian_show/g" `grep "promotion_show" -rl /etc/nginx/conf.d/www.tiantian_show.conf`查找目录：find /（查找范围） -name '查找关键字' -type d查找文件：find /（查找范围） -name 查找关键字 -print/data/soft/redis-2.8.17/src/redis-server /data/soft/redis-2.8.17/redis.conf 2&gt;&amp;1 &gt; /dev/null/data/soft/redis-2.8.17/src/redis-cli shutdownlinux查看80端口是否被占用最佳答案: netstat -anp | grep 80 | grep LISTEN 只能查到含有80的行。//查看php的扩展装了什么东西php -i ps ax|grep//linux防火关闭开启： chkconfig iptables on 关闭： chkconfig iptables off //递归删除find /web/tiantian_show/Application/cron/ -name "*.log" | xargs rm -f#########coreseedkcoreseek-3.2.14 也就是Sphinx 0.9.9 不支持sql_field_string字段，请安装更高级版本，Coreseek 4.0 或 Coreseek 4.1###安装vsftpdvi /etc/vsftpd/vsftpd.confchroot_local_user=NO#禁止访问上级目录chroot_list_enable=YES# (default follows)chroot_list_file=/etc/vsftpd/chroot_list###限制的用户放这里面/etc/init.d/vsftpd restart限制用户访问目录groupadd qianduan然后创建用户 qianduan1 并将其加入到 qianduan 用户组：useradd -G qianduan qianduan1#这里设置的用户可操作的目录为/home/qianduan/tiantian_showmkdir /home/qianduanmkdir /home/qianduan/tiantian_show#这个时候要把项目丢上去chown -R root:root /home/qianduanchmod 755 /home/qianduanchown qianduan1 /home/qianduan/tiantian_showchown -R root /home/qianduan/tiantian_show/*chmod -R 755 /home/qianduan/tiantian_show/*usermod -d /home/qianduan/tiantian_show qianduan1vi /etc/passwdqianduan1:x:502:503::/home/qianduan1:/bin/bash替换成qianduan1:x:502:503::/home/qianduan/tiantian_show:/sbin/nologin设定thinkphp访问目录权限chown qianduan1 /home/qianduan/tiantian_show/Application/chown qianduan1 /home/qianduan/tiantian_show/Application/Homechown -R qianduan1 /home/qianduan/tiantian_show/Application/Home/View/chown qianduan1 /home/qianduan/tiantian_show/static/chown -R qianduan1 /home/qianduan/tiantian_show/static/home/chown -R qianduan1 /home/qianduan/tiantian_show/static/pc/chmod 755 /home/qianduan/tiantian_show/Application/chmod 755 /home/qianduan/tiantian_show/Application/Homechmod 755 /home/qianduan/tiantian_show/Application/Home/View/chmod 755 /home/qianduan/tiantian_show/static/chmod 755 /home/qianduan/tiantian_show/static/home/chmod 755 /home/qianduan/tiantian_show/static/pc/chmod -R 777 /home/qianduan/tiantian_show/Application/Runtime/setfacl -R -m u:qianduan1:--- /home/qianduan/tiantian_show/#增加限制列表vi /etc/vsftpd/chroot_list把qianduan5加入进去####history命令vim ~/.bash_history###### 查找字符串find /etc|xargs grep -ri "要查找的字符串"]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux常用命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JSP中出现According to TLD or attribute directive in tag]]></title>
    <url>%2F2018%2F06%2F12%2FJSP%E4%B8%AD%E5%87%BA%E7%8E%B0According-to-TLD-or-attribute-directive-in-tag%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[centos下源码安装git]]></title>
    <url>%2F2018%2F03%2F12%2Fcentos%E4%B8%8B%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85git%2F</url>
    <content type="text"><![CDATA[从源代码进行编译安装转自：https://www.olinux.org.cn/linux/695.html 1. 先下载最新的 git 稳定版源码wget https://www.kernel.org/pub/software/scm/git/git-1.8.2.3.tar.gz2. 解压源码，并进入源码目录tar xzvf git-1.8.2.3.tar.gzcd git-1.8.2.33. 编译安装./configure prefix=/usr/localmake &amp;&amp; make install可能出现的错误：a. msgfmt: command not found解决方法：yum install gettextb. 安装完毕执行git，提示“git: error while loading shared libraries:libcharset.so.1: cannot open shared object file: No such file ordirectory”解决方法：ln -s /usr/local/lib/libcharset.so.1/lib/libcharset.so.14. 安装 Git 命令补全功能a. 复制命令补全脚本到 /etc/bash_completion.d/ 目录（没有则自行创建）cp contrib/completion/git-completion.bash /etc/b. 载入 git 命令自动补全脚本，使之在当前的 shell 环境中生效1 . /etc/git-completion.bash这时候你就会发现自动补全已经生效了。试试输入”git com”, 再按下 TAB 键看看吧。c. 为了命令补全功能能在下次启动终端时自动启用，需要在 /etc/profile 与 ~/.bashrc中添加如下内容：# Git commands autocompletionif [ -f /etc/git-completion.bash ]; then. /etc/git-completion.bashfi附：Windows 环境使用 Git 的相关工具1. Cygwin http://www.cygwin.com/2. msysGit http://msysgit.github.com/3. TortoiseGit http://code.google.com/p/tortoisegit/]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[libevent 安装异常,安装PHP中的memcache和memcached]]></title>
    <url>%2F2018%2F01%2F12%2Flibevent-%E5%AE%89%E8%A3%85%E5%BC%82%E5%B8%B8-%E5%AE%89%E8%A3%85PHP%E4%B8%AD%E7%9A%84memcache%E5%92%8Cmemcached%2F</url>
    <content type="text"><![CDATA[异常是因为没有openssl的包。 在这里下载https://www.openssl.org/source/ tar -xzf openssl-fips-2.0.16.tar.gz ./config shared zlib –prefix=/usr/local/openssl make &amp;&amp; make install 具体参考，安装PHP中的memcache和memcached https://www.cnblogs.com/flywind/p/6021568.html]]></content>
      <categories>
        <category>php</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[刚开始建立java web项目遇到的奇葩问题汇总]]></title>
    <url>%2F2017%2F12%2F23%2F%E5%88%9A%E5%BC%80%E5%A7%8B%E5%BB%BA%E7%AB%8Bjava-web%E9%A1%B9%E7%9B%AE%E9%81%87%E5%88%B0%E7%9A%84%E5%A5%87%E8%91%A9%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[The server does not support version 3.1 of the JEE Web module specification. 打开项目根目录下.settings的文件夹，该文件夹下有一个org.eclipse.wst.common.project.facet.core.xml文件， 把&lt;installed facet=”jst.web” version=”3.1”/&gt; 替换成 &lt;installed facet=”jst.web” version=”3.0”/&gt; 如果还不行，就改成2.5]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[svn搭建和使用]]></title>
    <url>%2F2017%2F03%2F12%2Fsvn%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[1，安装SVN服务端直接用apt-get或yum安装subversion即可（当然也可以自己去官方下载安装） [plain] view plain copy print? sudo apt-get install subversion 2，创建版本库[plain] view plain copy print? svnadmin create /home/myrepos //这里的文件目录自己随便设置 3，配置svnserve上述版本库/home/myrepos建立后在文件夹下会生成conf文件夹，进入/home/myrepos/conf下面会有下面3个文件 [plain] view plain copy print? authz passwd svnserve.conf 我们依次修改 3.1，svnserve.conf修改以下几个部分：[plain] view plain copy print? anon-access = read auth-access = write password-db = passwd authz-db = authz 3.2，passwd修改为：[plain] view plain copy print? [users] username = password //这里的username和password自己设置 3.3，authz最后加上以下两行(这两行解决了 SVN客户端解决authorization failed问题)[sql] view plain copy print? [\] = rw 4，启动svnserve即可：[plain] view plain copy print? svnserve -d -r /home/myrepos/ 5，客户端使用：客户端用svn或者windows下的TortoiseSVN客户端 5.1，从服务端checkout版本库（在当前目录下）[plain] view plain copy print? svn checkout svn://服务器的ip地址/ 5.2，自己增加一些文件，或者把之前的东西（如下面三个文件夹）拷贝到当前目录下，想让svn帮你管理[plain] view plain copy print? code project document 5.3，假设我把上述三个文件夹放到当前svn的文件夹下想让svn管理，然后我要做的是添加到svn版本库里：[html] view plain copy print? svn add code project document //或者直接用svn add * 5.4，最后提交到svn服务器[plain] view plain copy print? svn commit -m ‘import three directories’ 一定要对当前版本写注释。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>svn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux 用户组，用户，增删改]]></title>
    <url>%2F2017%2F03%2F07%2Flinux-%E7%94%A8%E6%88%B7%E7%BB%84%EF%BC%8C%E7%94%A8%E6%88%B7%EF%BC%8C%E5%A2%9E%E5%88%A0%E6%94%B9%2F</url>
    <content type="text"><![CDATA[0、建立用户 操作步骤： useradd -d /home/applog/USFM -m usfm passwd usfm 输入密码usfms1234 chown -R usfm:usfm /home/applog/USFM chmod 760 /home/applog/USFM 建立用户usfm，设置主目录为/home/applog/USFM，设置密码为usfms1234 1、建用户：adduser phpq //新建phpq用户passwd phpq //给phpq用户设置密码 2、建工作组groupadd test //新建test工作组 3、新建用户同时增加工作组useradd -g test phpq //新建phpq用户并增加到test工作组 注：：-g 所属组 -d 家目录 -s 所用的SHELL 4、给已有的用户增加工作组usermod -G groupname username 或者：gpasswd -a user group 5、临时关闭：在/etc/shadow文件中属于该用户的行的第二个字段（密码）前面加上就可以了。想恢复该用户，去掉即可。 或者使用如下命令关闭用户账号：passwd peter –l 重新释放：passwd peter –u 6、永久性删除用户账号userdel peter groupdel peter usermod –G peter peter （强制删除该用户的主目录和主目录下的所有文件和子目录） 7、从组中删除用户编辑/etc/group 找到GROUP1那一行，删除 A或者用命令gpasswd -d A GROUP 8、显示用户信息id usercat /etc/passwd 9、查看用户所在组 cat /etc/group 10、给当前用户增加目录权限 chown -R user:usergroup /usr/local/binuser为你的普通用户usergroup为这个普通用户的组 11、修改文件所属用户和组 使用chown命令可以修改文件或目录所属的用户： 命令：chown 用户 目录或文件名 例如：chown qq /home/qq (把home目录下的qq目录的拥有者改为qq用户) 使用chgrp命令可以修改文件或目录所属的组： 命令：chgrp 组 目录或文件名 例如：chgrp qq /home/qq (把home目录下的qq目录的所属组改为qq组) 12、限制某个用户不能访问该文件夹 setfacl -R -m u:fangwei:- /home/wwwroot/bolang 13、让某个用户，对文件有访问权限因为你使用root登录的所以在root用户下setfacl -m u:xman:rxw 文件名 14.更改用户家目录 usermod -m -d /home/user2 -u 1001 user1; 或 usermod -d /home/user2 -m -u 1001 user1; 更详细的用户和用户组的解说请参考Linux 用户和用户组详细解说本文主要讲述在Linux 系统中用户(user)和用户组(group)管理相应的概念；用户(user)和用户组(group)相关命令的列举；其中也对单用户多任务，多用户多任务也做以解说。 本篇文章来源于 PHP资讯 原文链接：http://www.phpq.net/linux/linux-add-delete-user-group.html Linux 用户（user）和用户组（group）管理概述 、理解Linux的单用户多任务，多用户多任务概念； Linux 是一个多用户、多任务的操作系统；我们应该了解单用户多任务和多用户多任务的概念； 1、Linux 的单用户多任务； 单 用户多任务；比如我们以beinan 登录系统，进入系统后，我要打开gedit 来写文档，但在写文档的过程中，我感觉少点音乐，所以又打开xmms 来点音乐；当然听点音乐还不行，MSN 还得打开，想知道几个弟兄现在正在做什么，这样一样，我在用beinan 用户登录时，执行了gedit 、xmms以及msn等，当然还有输入法fcitx ；这样说来就有点简单了，一个beinan用户，为了完成工作，执行了几个任务；当然beinan这个用户，其它的人还能以远程登录过来，也能做其它的工 作。 2、Linux 的多用户、多任务； 有时可能是很多用户同时用同一个系统，但并不所有的用户都一定都要做同一件事，所以这就有多用户多任务之说； 举个例子，比如LinuxSir.Org 服务器，上面有FTP 用户、系统管理员、web 用户、常规普通用户等，在同一时刻，可能有的弟兄正在访问论坛；有的可能在上传软件包管理子站，比如luma 或Yuking 兄在管理他们的主页系统和FTP ；在与此同时，可能还会有系统管理员在维护系统；浏览主页的用的是nobody 用户，大家都用同一个，而上传软件包用的是FTP用户；管理员的对系统的维护或查看，可能用的是普通帐号或超级权限root帐号；不同用户所具有的权限也不同，要完成不同的任务得需要不同的用户，也可以说不同的用户，可能完成的工作也不一样； 值得注意的是：多用户多任务并不是大家同时挤到一接在一台机器的的键盘和显示器前来操作机器，多用户可能通过远程登录来进行，比如对服务器的远程控制，只要有用户权限任何人都是可以上去操作或访问的； 3、用户的角色区分； 用户在系统中是分角色的，在Linux 系统中，由于角色不同，权限和所完成的任务也不同；值得注意的是用户的角色是通过UID和识别的，特别是UID；在系统管理中，系统管理员一定要坚守UID 唯一的特性； root 用户：系统唯一，是真实的，可以登录系统，可以操作系统任何文件和命令，拥有最高权限；虚拟用户：这类用户也被称之为伪用户或假用户，与真实用户区分开来，这类用户不具有登录系统的能力，但却是系统运行不可缺少的用户，比如bin、daemon、adm、ftp、mail等；这类用户都系统自身拥有的，而非后来添加的，当然我们也可以添加虚拟用户；普通真实用户：这类用户能登录系统，但只能操作自己家目录的内容；权限有限；这类用户都是系统管理员自行添加的； 4、多用户操作系统的安全； 多用户系统从事实来说对系统管理更为方便。从安全角度来说，多用户管理的系统更为安全，比如beinan用户下的某个文件不想让其它用户看到，只是 设置一下文件的权限，只有beinan一个用户可读可写可编辑就行了，这样一来只有beinan一个用户可以对其私有文件进行操作，Linux 在多用户下表现最佳，Linux能很好的保护每个用户的安全，但我们也得学会Linux 才是，再安全的系统，如果没有安全意识的管理员或管理技术，这样的系统也不是安全的。 从服务器角度来说，多用户的下的系统安全性也是最为重要的，我们常用的Windows 操作系统，它在系纺权限管理的能力只能说是一般般，根本没有没有办法和Linux或Unix 类系统相比； 二、用户(user）和用户组（group）概念； 1、用户（user）的概念； 通 过前面对Linux 多用户的理解，我们明白Linux 是真正意义上的多用户操作系统，所以我们能在Linux系统中建若干用户（user）。比如我们的同事想用我的计算机，但我不想让他用我的用户名登录，因 为我的用户名下有不想让别人看到的资料和信息（也就是隐私内容）这时我就可以给他建一个新的用户名，让他用我所开的用户名去折腾，这从计算机安全角度来说 是符合操作规则的； 当然用户（user）的概念理解还不仅仅于此，在Linux系统中还有一些用户是用来完成特定任务的，比如nobody和ftp 等，我们访问LinuxSir.Org 的网页程序，就是nobody用户；我们匿名访问ftp 时，会用到用户ftp或nobody ；如果您想了解Linux系统的一些帐号，请查看 /etc/passwd ； 2、用户组（group）的概念； 用 户组（group）就是具有相同特征的用户（user）的集合体；比如有时我们要让多个用户具有相同的权限，比如查看、修改某一文件或执行某个命令，这时 我们需要用户组，我们把用户都定义到同一用户组，我们通过修改文件或目录的权限，让用户组具有一定的操作权限，这样用户组下的用户对该文件或目录都具有相 同的权限，这是我们通过定义组和修改文件的权限来实现的； 举例：我们为了让一些用户有权限查看某一文档，比如是一个时间表，而编写时间表的人要具有读写执行的权限，我们想让一些用户知道这个时间表的内容， 而不让他们修改，所以我们可以把这些用户都划到一个组，然后来修改这个文件的权限，让用户组可读，这样用户组下面的每个用户都是可读的；用户和用户组的对应关系是：一对一、多对一、一对多或多对多； 一对一：某个用户可以是某个组的唯一成员；多对一：多个用户可以是某个唯一的组的成员，不归属其它用户组；比如beinan和linuxsir两个用户只归属于beinan用户组；一对多：某个用户可以是多个用户组的成员；比如beinan可以是root组成员，也可以是linuxsir用户组成员，还可以是adm用户组成员；多对多：多个用户对应多个用户组，并且几个用户可以是归属相同的组；其实多对多的关系是前面三条的扩展；理解了上面的三条，这条也能理解； 三、用户（user）和用户组（group）相关的配置文件、命令或目录； 1、与用户（user）和用户组（group）相关的配置文件； 1）与用户（user）相关的配置文件； /etc/passwd 注：用户（user）的配置文件；/etc/shadow 注：用户（user）影子口令文件； 2）与用户组（group）相关的配置文件； /etc/group 注：用户组（group）配置文件；/etc/gshadow 注：用户组（group）的影子文件； 2、管理用户（user）和用户组（group）的相关工具或命令； 1）管理用户（user）的工具或命令； useradd 注：添加用户 adduser 注：添加用户 passwd 注：为用户设置密码 usermod 注：修改用户命令，可以通过usermod 来修改登录名、用户的家目录等等； pwcov 注：同步用户从/etc/passwd 到/etc/shadow pwck 注：pwck是校验用户配置文件/etc/passwd 和/etc/shadow 文件内容是否合法或完整； pwunconv 注：是pwcov 的立逆向操作，是从/etc/shadow和 /etc/passwd 创建/etc/passwd ，然后会删除 /etc/shadow 文件； finger 注：查看用户信息工具 id 注：查看用户的UID、GID及所归属的用户组 chfn 注：更改用户信息工具 su 注：用户切换工具 sudo 注：sudo 是通过另一个用户来执行命令（execute a command as another user），su 是用来切换用户，然后通过切换到的用户来完成相应的任务，但sudo 能后面直接执行命令，比如sudo 不需要root 密码就可以执行root 赋与的执行只有root才能执行相应的命令；但得通过visudo 来编辑/etc/sudoers来实现； visudo 注：visodo 是编辑 /etc/sudoers 的命令；也可以不用这个命令，直接用vi 来编辑 /etc/sudoers 的效果是一样的； sudoedit 注：和sudo 功能差不多； 2）管理用户组（group）的工具或命令； groupadd 注：添加用户组； groupdel 注：删除用户组； groupmod 注：修改用户组信息 groups 注：显示用户所属的用户组 grpck grpconv 注：通过/etc/group和/etc/gshadow 的文件内容来同步或创建/etc/gshadow ，如果/etc/gshadow 不存在则创建； grpunconv 注：通过/etc/group 和/etc/gshadow 文件内容来同步或创建/etc/group ，然后删除gshadow文件； 3、/etc/skel 目录； /etc /skel目录一般是存放用户启动文件的目录，这个目录是由root权限控制，当我们添加用户时，这个目录下的文件自动复制到新添加的用户的家目录下； /etc/skel 目录下的文件都是隐藏文件，也就是类似.file格式的；我们可通过修改、添加、删除/etc/skel目录下的文件，来为用户提供一个统一、标准的、默 认的用户环境； [root@localhost beinan]# ls -la /etc/skel/ 总用量 92 drwxr-xr-x 3 root root 4096 8月 11 23:32 . drwxr-xr-x 115 root root 12288 10月 14 13:44 .. -rw-r--r-- 1 root root 24 5月 11 00:15 .bash_logout -rw-r--r-- 1 root root 191 5月 11 00:15 .bash_profile -rw-r--r-- 1 root root 124 5月 11 00:15 .bashrc -rw-r--r-- 1 root root 5619 2005-03-08 .canna -rw-r--r-- 1 root root 438 5月 18 15:23 .emacs -rw-r--r-- 1 root root 120 5月 23 05:18 .gtkrc drwxr-xr-x 3 root root 4096 8月 11 23:16 .kde -rw-r--r-- 1 root root 658 2005-01-17 .zshrc /etc/skel 目录下的文件，一般是我们用useradd 和adduser 命令添加用户（user）时，系统自动复制到新添加用户（user）的家目录下；如果我们通过修改 /etc/passwd 来添加用户时，我们可以自己创建用户的家目录，然后把/etc/skel 下的文件复制到用户的家目录下，然后要用chown 来改变新用户家目录的属主；4、/etc/login.defs 配置文件； /etc/login.defs 文件是当创建用户时的一些规划，比如创建用户时，是否需要家目录，UID和GID的范围；用户的期限等等，这个文件是可以通过root来定义的； 比如Fedora 的 /etc/logins.defs 文件内容； `# REQUIRED Directory where mailboxes reside, _or_ name of file, relative to thehome directory. If you _do_ define both, MAIL_DIR takes precedence.QMAIL_DIR is for Qmail #QMAIL_DIR MaildirMAIL_DIR /var/spool/mail 注：创建用户时，要在目录/var/spool/mail中创建一个用户mail文件； #MAIL_FILE .mail Password aging controls: PASS_MAX_DAYS Maximum number of days a password may be used.PASS_MIN_DAYS Minimum number of days allowed between password changes.PASS_MIN_LEN Minimum acceptable password length.PASS_WARN_AGE Number of days warning given before a password expires. PASS_MAX_DAYS 99999 注：用户的密码不过期最多的天数；PASS_MIN_DAYS 0 注：密码修改之间最小的天数；PASS_MIN_LEN 5 注：密码最小长度；PASS_WARN_AGE 7 注： Min/max values for automatic uid selection in useradd UID_MIN 500 注：最小UID为500 ，也就是说添加用户时，UID 是从500开始的；UID_MAX 60000 注：最大UID为60000； Min/max values for automatic gid selection in groupadd GID_MIN 500 注：GID 是从500开始；GID_MAX 60000 If defined, this command is run when removing a user.It should remove any at/cron/print jobs etc. owned bythe user to be removed (passed as the first argument). #USERDEL_CMD /usr/sbin/userdel_local If useradd should create home directories for users by defaultOn RH systems, we do. This option is ORed with the -m flag onuseradd command line. CREATE_HOME yes 注：是否创用户家目录，要求创建；` 5、/etc/default/useradd 文件； 通过useradd 添加用户时的规则文件； # useradd defaults file GROUP=100 HOME=/home 注：把用户的家目录建在/home中； INACTIVE=-1 注：是否启用帐号过期停权，-1表示不启用； EXPIRE= 注：帐号终止日期，不设置表示不启用； SHELL=/bin/bash 注：所用SHELL的类型； SKEL=/etc/skel 注： 默认添加用户的目录默认文件存放位置；也就是说，当我们用adduser添加用户时，用户家目录下的文件，都是从这个目录中复制过去的； 后记： 关于用户（user）和用户组（group）管理内容大约就是这么多；只要把上面所说的内容了解和掌握，用户（user）和用户组（group）管 理就差不多了；由于用户（user）和用户组（group）是和文件及目录权限联系在一起的，所以文件及目录权限的操作也会独立成文来给大家介绍； 摘自 http://fedora.linuxsir.org/main/?q=node/91]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Firefox伪造请求头]]></title>
    <url>%2F2017%2F01%2F08%2FFirefox%E4%BC%AA%E9%80%A0%E8%AF%B7%E6%B1%82%E5%A4%B4%2F</url>
    <content type="text"><![CDATA[原文地址：http://justcoding.iteye.com/blog/2086233 Firefox黑客插件：http://blog.csdn[.NET](http://lib.csdn.net/base/dotnet “.NET知识库”)/stilling2006/article/details/7753592 大概有两年没有去过chinaz的论坛了，昨天上去逛了逛。正好看到一个朋友在问百度是如何判断是不是手机登录的。有几个热心朋友回答的是js，我把百度首页的js看了下，没有找到一丝的手持设备判断的信息，我也就回答了两句，这里的判断应该属于程序部分的处理，不属于前端的范畴，是靠判断请求头信息（HTTP_USER_AGENT）进行判断的。不知道这位朋友能不能明白。 为了验证这个结论，这里我用firefox伪造请求头信息（主要是HTTP_USER_AGENT部分），来进行模拟手机访问百度网站。具体操作流程看下面。 如何用firefox伪造user agent来模拟手机访问网站 首先需要安装三个Firefox插件：wmlbrowser、XHTML Mobile Profile、User Agent Switcher；（我称它们为“伪娘三贱客”） 先来一睹“伪娘三贱客”的尊容 安 装好后需要设置 User Agent Switcher ，点击菜单 工具 → Default User Agent → User Agent Switcher → Options → New→New User Agent… ，Description是你给它的一个称呼，比如小三，凹凸曼等等。关键的部分是User Agent里面的东西（这里是请求头主要的信息，程序会根据这个请求头进行判断你是否是手持设备），这里就需要把我们想要模拟的手持设备的信息填入了。 添加好后一路确定，回到浏览器界面。工具 →default user agent →选择你自己添加的那个 →在浏览器地址输入你想要访问的地址即可。十分大方这里你会看到几个选项，Default User Agent (浏览器默认的信息)，Internet Explorer （可以模拟ie6,7,8的头信息），Search Robots （模拟谷歌，雅虎，msn的蜘蛛），iphone 3.0 （默认存在的一个），图片中的小三是我自己添加的一个（伪造Android的头信息） 下面列出几个比较常见手机的User Agent：(如果想要查询更多的手机user agent 信息的话，去看这里，还有这里)iPhone3：Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.16Android：Mozilla/5.0 (Linux; U; Android 2.2; en-us; Nexus One Build/FRF91) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1诺基亚N95：Mozilla/5.0 (SymbianOS/9.2; U; Series60/3.1 NokiaN95/30.0.015; Profile MIDP-2.0 Configuration/CLDC-1.1) AppleWebKit/413 (KHTML, like Gecko) Safari/413诺基亚N97：Mozilla/5.0 (SymbianOS/9.4; Series60/5.0 NokiaN97-1/20.0.019; Profile/MIDP-2.1 Configuration/CLDC-1.1) AppleWebKit/525 (KHTML, like Gecko) BrowserNG/7.1.18124 firefox伪造头信息，访问网站的效果ok，当上面的几步你都熟悉了的话，就可以输入你想要造访的网站了。下面看我用我的“小三”拜访百度首页的情况（小三伪造的安卓的头） Now，看到了吧。百度首页变了吧。而且智能的判断出了这个采用安卓系统访问！你可以换成iphone试试，框中的部分是不同的！ 这里你也许会发现用浏览器访问的百度页面好大啊，其实这里是它页面css的问题，为了实现自适应屏幕宽度。如果想要得到好的浏览效果的话，可以参考如何在电脑上模拟手机登陆网站（Opera Mobile Emulator） 查看firefox发送的头信息，进一步验证我的结论我们用firebug查看一下请求头信息User-Agent的内容，发现就是我修改的安卓的user agent。而百度首页返回了不同的页面，ok结论成立。百度是通过服务端进行手持设备的判断，不过怎样判断的，代码是什么，这里我就不甚了了了。 下面的这段可以复制进去，然后保存成xml文件。选择KIW-AL10]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[svn 添加]]></title>
    <url>%2F2016%2F12%2F12%2Fsvn-%E6%B7%BB%E5%8A%A0%2F</url>
    <content type="text"><![CDATA[一. 使用yum 安装SVN包 关于YUM 服务器的配置参考：Linux 搭建 YUM 服务器http://blog.csdn.net/tianlesoftware/archive/2011/01/03/6113902.aspx 1.安装svn命令如下 [root@shxt~]# yum install -y subversion 验证安装版本 [root@shxt ~]# svnserve –version 创建SVN 版本库 [root@shxt ~]# mkdir /var/www/svn [root@shxt ~]# svnadmin create /var/www/svn/testproject – testproject 为版本库名称 为svn创建用户 [root@shxt ~]# htpasswd -c /var/www/passwd ***(这个根据情况不同，写法不同， -c是创建用户（删除原有用户）,-d是在原有基础上添加用户）) 2.配置svn创建版本库后，在这个目录下会生成3个配置文件：[root@shxt conf]# pwd/var/www/svn/testproject/conf[root@shxt conf]# ls authz passwd svnserve.conf svnserve.conf 文件， 该文件配置项分为以下5项： anon-access： 控制非鉴权用户访问版本库的权限。 auth-access： 控制鉴权用户访问版本库的权限。 password-db： 指定用户名口令文件名。 authz-db：指定权限配置文件名，通过该文件可以实现以路径为基础的访问控制。 realm：指定版本库的认证域，即在登录时提示的认证域名称。若两个版本库的认证域相同，建议使用相同的用户名口令数据文件 Passwd 文件 ：我们在svnserve.conf文件里启用这个文件。然后配置如下：[root@shxt conf]# vi passwd[users]# harry = harryssecret# sally = sallyssecretadmin = adminzhangsan= zhangsanpwd authz 文件 ：下面我们来配置我们的authz文件： [root@shxt conf]# vi authz[groups]admin = adminzhangsan=zhangsan[project:/]@admin = rw@zhangsan = rw[root@shxt conf]# 以下是在网上找到一个很好的配置例子：[groups]admin = john, katedevteam1 = john, rachel, sallydevteam2 = kate, peter, markdocs = bob, jane, miketraining = zak–这里把不同用户放到不同的组里面，下面在设置目录访问权限的时候，用目录来操作就可以了。# 为所有库指定默认访问规则# 所有人可以读，管理员可以写，危险分子没有任何权限[/] –对应我测试里的：/u02/svn 目录* = r@admin = rwdangerman = # 允许开发人员可以完全访问他们的项目版本库[proj1:/]@devteam1 = rw[proj2:/]@devteam2 = rw[bigproj:/]@devteam1 = rw@devteam2 = rwtrevor = rw # 文档编写人员对所有的docs目录有写权限[/trunk/doc]@docs = rw # 培训人员可以完全访问培训版本库[TrainingRepos:/]@training = rw 3.启动和停止SVN服务 （1）启动SVN服务:[root@shxt conf]# svnserve -d -r /var/www/svn -d表示后台运行 -r 指定根目录是 /var/www/svn（2） 查看svn服务[root@shxt conf]# ps -ef | grep svn（3）停止SVN服务: [root@shxt conf]# ps -aux |grep svn [root@shxt conf]# kill -9 进程杀掉 多数时候会把svn服务放到apache的服务中重启apache/usr/local/apache/bin/apachectl restart 或者 service httpd restart 如果遇到下列问题Can’t open file ‘/var/www/svn/repo_name/db/txn-current-lock’: Permission denied需要分配读写权限$ cd /var/www/svn $ chown -R apache.apache project（项目名） 或者 $ chmod –R o+rw /var/www/svn/二. 客户端连接SVN 服务器 2.1 安装TortoiseSVN 客户端 下载地址：http://tortoisesvn.net/downloads.html 2.2 找到自己项目的目录，右击，进行SVN 操作 （1）新建测试目录svn，进入后右键，点checkout： SVN 服务器的IP地址和版本库名称。 新建个文件svn.txt. 把这个文件上传到SVN服务器(add)： 三.linux下svn使用命令总结： 1、将文件checkout到本地目录svn checkout path（path是服务器上的目录）例如：svn checkout svn://192.168.1.1/pro/domain简写：svn co2、往版本库中添加新的文件svn add file例如：svn add test.php(添加test.php)svn add *.php(添加当前目录下所有的php文件)3、将改动的文件提交到版本库svn commit -m “LogMessage“ [-N] [–no-unlock] PATH(如果选择了保持锁，就使用–no-unlock开关)例如：svn commit -m “add test file for my test“ test.php简写：svn ci4、加锁/解锁svn lock -m “LockMessage“ [–force] PATH例如：svn lock -m “lock test file“ test.phpsvn unlock PATH5、更新到某个版本svn update -r m path例如：svn update如果后面没有目录，默认将当前目录以及子目录下的所有文件都更新到最新版本。svn update -r 200 test.php(将版本库中的文件test.php还原到版本200)svn update test.php(更新，于版本库同步。如果在提交的时候提示过期的话，是因为冲突，需要先update，修改文件，然后清除svn resolved，最后再提交commit)简写：svn up6、查看文件或者目录状态1）svn status path（目录下的文件和子目录的状态，正常状态不显示）【?：不在svn的控制中；M：内容被修改；C：发生冲突；A：预定加入到版本库；K：被锁定】2）svn status -v path(显示文件和子目录状态)第一列保持相同，第二列显示工作版本号，第三和第四列显示最后一次修改的版本号和修改人。注：svn status、svn diff和 svn revert这三条命令在没有网络的情况下也可以执行的，原因是svn在本地的.svn中保留了本地版本的原始拷贝。简写：svn st7、删除文件svn delete path -m “delete test fle“例如：svn delete svn://192.168.1.1/pro/domain/test.php -m “delete test file”或者直接svn delete test.php 然后再svn ci -m ‘delete test file‘，推荐使用这种简写：svn (del, remove, rm)8、查看日志svn log path例如：svn log test.php 显示这个文件的所有修改记录，及其版本号的变化9、查看文件详细信息svn info path例如：svn info test.php10、比较差异svn diff path(将修改的文件与基础版本比较)例如：svn diff test.phpsvn diff -r m:n path(对版本m和版本n比较差异)例如：svn diff -r 200:201 test.php简写：svn di11、将两个版本之间的差异合并到当前文件svn merge -r m:n path例如：svn merge -r 200:205 test.php（将版本200与205之间的差异合并到当前文件，但是一般都会产生冲突，需要处理一下）12、SVN 帮助svn helpsvn help ci——————————————————————————以上是常用命令，下面写几个不经常用的——————————————————————————13、版本库下的文件和目录列表svn list path显示path目录下的所有属于版本库的文件和目录简写：svn ls14、创建纳入版本控制下的新目录svn mkdir: 创建纳入版本控制下的新目录。用法: 1、mkdir PATH…2、mkdir URL…创建版本控制的目录。1、每一个以工作副本 PATH 指定的目录，都会创建在本地端，并且加入新增调度，以待下一次的提交。2、每个以URL指定的目录，都会透过立即提交于仓库中创建。在这两个情况下，所有的中间目录都必须事先存在。15、恢复本地修改svn revert: 恢复原始未改变的工作副本文件 (恢复大部份的本地修改)。revert:用法: revert PATH…注意: 本子命令不会存取网络，并且会解除冲突的状况。但是它不会恢复被删除的目录16、代码库URL变更svn switch (sw): 更新工作副本至不同的URL。用法: 1、switch URL [PATH]2、switch –relocate FROM TO [PATH…]1、更新你的工作副本，映射到一个新的URL，其行为跟“svn update”很像，也会将服务器上文件与本地文件合并。这是将工作副本对应到同一仓库中某个分支或者标记的方法。2、改写工作副本的URL元数据，以反映单纯的URL上的改变。当仓库的根URL变动(比如方案名或是主机名称变动)，但是工作副本仍旧对映到同一仓库的同一目录时使用这个命令更新工作副本与仓库的对应关系。17、解决冲突svn resolved: 移除工作副本的目录或文件的“冲突”状态。用法: resolved PATH…注意: 本子命令不会依语法来解决冲突或是移除冲突标记；它只是移除冲突的相关文件，然后让 PATH 可以再次提交。18、输出指定文件或URL的内容。svn cat 目标[@版本]…如果指定了版本，将从指定的版本开始查找。svn cat -r PREV filename &gt; filename (PREV 是上一版本,也可以写具体版本号,这样输出结果是可以提交的) 文章参考http://blog.csdn.net/tianlesoftware/article/details/6119231http://www.jb51.net/os/RedHat/2461.html 如有错误之处，还望广大eyer不吝指出，我好及时修改，方便其他人借鉴。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>svn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vagrant安装镜像以及vagrant目录映射失败]]></title>
    <url>%2F2016%2F11%2F29%2Fvagrant%E5%AE%89%E8%A3%85%E9%95%9C%E5%83%8F%E4%BB%A5%E5%8F%8Avagrant%E7%9B%AE%E5%BD%95%E6%98%A0%E5%B0%84%E5%A4%B1%E8%B4%A5%2F</url>
    <content type="text"><![CDATA[进入到该目录，dev，如果没有请创建。 vagrant box add dev centos-6.5-x86_64-base.box PS: 上面的命令含义为：vagrant 是vagrant的命令，box为参数，add为添加一个box环境，dev为你要创建的box环境名称，centos-6.5-x86_64-base.box 为你下载的box环境镜像。 vagrant init 之后把生成的文件，修改成如下格式： ###---------------------------------- # -*- mode: ruby -*- # vi: set ft=ruby : # Vagrantfile API/syntax version. Don&apos;t touch unless you know what you&apos;re doing! VAGRANTFILE_API_VERSION = &quot;2&quot; Vagrant.configure(VAGRANTFILE_API_VERSION) do |config| config.vm.box = &quot;dev&quot; config.vm.network &quot;private_network&quot;, ip: &quot;192.168.192.192&quot; config.vm.synced_folder &quot;E:/work&quot;, &quot;/home/httpd/sites/work&quot; config.vm.provider &quot;virtualbox&quot; do |vb| vb.customize [&quot;modifyvm&quot;, :id, &quot;--memory&quot;, &quot;640&quot;] end end ###------------------------- 修改完成，启动虚拟机 vagrant up vagrant目录映射失败： 编辑Vagrantfile 修改config.vm.synced_folder config.vm.synced_folder “E:/app”, “/home” 第一个参数，是相对于Vagrantfile所在宿主机的目录第二个参数，虚拟机内被挂载的目录 添加必须的插件 vagrant plugin install vagrant-vbguest 运行 vagrant reload]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>vagrant</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【技术】在windows下进行linux开发：利用Vagrant+virtualbox]]></title>
    <url>%2F2016%2F11%2F09%2F%E3%80%90%E6%8A%80%E6%9C%AF%E3%80%91%E5%9C%A8windows%E4%B8%8B%E8%BF%9B%E8%A1%8Clinux%E5%BC%80%E5%8F%91%EF%BC%9A%E5%88%A9%E7%94%A8Vagrant-virtualbox%2F</url>
    <content type="text"><![CDATA[1，介绍Vagrant 我们做web开发的时候经常要安装各种本地测试环境，比如apache,php,mysql,redis等等。出于个人使用习惯，可能我们还是比较 习惯用windows。虽然说在windows下搭建各种开发环境是可行的，各大开发环境都有windows版本。然而在windows下配置有时候会显 得繁琐，并且还会导致开发环境（windows）和生产环境（lunix）不一致。能不能在windows下也像linux那样开发？也许你想到了，用虚拟机。用虚拟机装个linux系统就好了。装完linux系统就设置共享目录，设置网络端口映射，等等。好像也有那么点繁琐。还有，假如我们是一个团队进行开发，那么每个人的电脑上都要装个虚拟机+ linux系统+各种运行环境。手动设置麻烦不说，大家的开发环境不太一致（可能你装了apcahe我装了nginx等），也是头疼。能不能把各种设置都自动化，并且保持整个团队的开发环境一致呢？Vagrant就是为了解决这个问题而生的。它使用开源 VirtualBox 作为虚拟化支持，可以轻松的跨平台部署。 2，下载下载VirtualBox：http://download.virtualbox.org/virtualbox/4.3.28/VirtualBox-4.3.28-100309-Win.exe上面给出的是4.3.28版本的下载链接。要下载其他版本请访问官网https://www.virtualbox.org/wiki/Downloads 下载Vagrant：https://dl.bintray.com/mitchellh/vagrant/vagrant_1.7.2.msi上面给出的是1.7.2版本的下载链接。要下载其他版本请访问官网http://www.vagrantup.com/downloads.html 下载虚拟镜像：https://github.com/tommy-muehle/puppet-vagrant-boxes/releases/download/1.0.0/centos-6.6-x86_64.box 上面给出的是centos-6.6镜像下载链接，要下载其他镜像请访问官网http://www.vagrantbox.es/ 3，安装下载好上面的软件包后，先安装VirtualBox,然后安装Vagrant。都是双击即可安装的，所以没什么好介绍。下面介绍下怎么把镜像导入。先新建一个工作目录比如我新建了D:\VagrantWork\centos-6.6-x86_64\打开cmd命令提示符，进入新目录，以我上面的目录为例，输入 1 2 D: cd D:\VagrantWork\centos-6.6-x86_64\ 然后输入命令初始化 1 vagrant init centos6.6 把下载的centos-6.6-x86_64.box复制到本目录D:\VagrantWork\centos-6.6-x86_64\下，执行 1 vagrant box add centos6.6 centos-6.6-x86_64.box 检查是否导入成功 1 vagrant box list 4，配置用文本编辑器打开D:\VagrantWork\centos-6.6-x86_64\目录下的Vagrantfile文件便可以进行一些常用配置。下面列举出几个常用的配置。要用到其他配置请访问官网文档或者百度谷歌一下。1，端口映射 1 config.vm.network :forwarded_port, guest: 80, host: 8080 把上面这句代码前面的#号去掉。它表示映射本机的8080端口到虚拟机的80端口2，如果需要自己自由的访问虚拟机，但是别人不需要访问虚拟机，可以使用private_network，并为虚拟机设置IP。 1 config.vm.network :private_network, ip: &quot;192.168.33.10&quot; 把上面这句代码前面的#号去掉即可3，目录映射 1 config.vm.synced_folder &quot;../data&quot;, &quot;/var/www&quot; 如果启用上面的命令，表示把本机的data目录共享到虚拟机里的/var/www目录 5，启动进入目录D:\VagrantWork\centos-6.6-x86_64\后执行命令 1 vagrant up 虚拟机启动之后则可以通过 vagrant ssh 联入虚拟机进行进一步的环境配置，或者软件安装相关的工作，在Windows系统下，并不能直接通过 vagrant ssh 连到虚拟机，需要使用 Putty，Xshell 等第三方工具进行连接。连接地址127.0.0.1，端口2222。登录的帐号root的密码为 vagrant 6，导出在cmd里进行工作目录后，执行下面命令 1 vagrant package 完成后会在当前目录就会生成package.box，之后新建虚拟机则可使用这个box。如果事先在你的虚拟机里建立好了各种开发环境，那么你直接把这个box给你的团队其他成员安装，这样就可以省去一台台电脑部署的时间，还可以保持开发环境一致。很方便有木有。 7，其他命令下面列举出一些常用的cmd操作命令vagrant up （启动虚拟机）vagrant halt （关闭虚拟机——对应就是关机）vagrant suspend （暂停虚拟机——只是暂停，虚拟机内存等信息将以状态文件的方式保存在本地，可以执行恢复操作后继续使用）vagrant resume （恢复虚拟机 —— 与前面的暂停相对应）vagrant box remove centos6.6 （移除box，其中centos6.6是box名）vagrant destroy （删除虚拟机，删除后在当前虚拟机所做进行的除开Vagrantfile中的配置都不会保留）]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>vagrant</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redis 数据备份与恢复]]></title>
    <url>%2F2016%2F09%2F22%2FRedis-%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D%2F</url>
    <content type="text"><![CDATA[Redis SAVE 命令用于创建当前数据库的备份。 语法redis Save 命令基本语法如下： redis 127.0.0.1:6379&gt; SAVE 实例 redis 127.0.0.1:6379&gt; SAVE OK 该命令将在 redis 安装目录中创建dump.rdb文件。 恢复数据如果需要恢复数据，只需将备份文件 (dump.rdb) 移动到 redis 安装目录并启动服务即可。 如果不知道安装目录在redis 上面输入命令CONFIG GET 打印出 dir /usr/local/redis/bin 底下的这个/usr/local/redis/bin就是安装目录，把刚备份的复制到里面，之后重启redis生效 Bgsave 创建 redis 备份文件也可以使用命令 BGSAVE，该命令在后台执行。 实例 127.0.0.1:6379&gt; BGSAVE Background saving started]]></content>
      <categories>
        <category>redis</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[linux系统用户下的crontab任务不执行问题处理]]></title>
    <url>%2F2016%2F05%2F12%2Flinux%E7%B3%BB%E7%BB%9F%E7%94%A8%E6%88%B7%E4%B8%8B%E7%9A%84crontab%E4%BB%BB%E5%8A%A1%E4%B8%8D%E6%89%A7%E8%A1%8C%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%2F</url>
    <content type="text"><![CDATA[需求：需要每一天对数据库做一个备份，oracle数据库，linux系统。 linux系统用户下的crontab任务不执行问题处理备份命令采用最简单的导出\导入。 首先确认服务器是否开启任务计划服务，只有root用户才能对crond服务进行开启和关闭 [root@enfo124 ~]# service crond statuscrond (pid 1758) is running…[root@enfo124 ~]# service crond stopStopping crond: [ OK ][root@enfo124 ~]# su - cognos[cognos@enfo124 ~]$ service crond statuscrond is stopped[cognos@enfo124 ~]$ su - root[root@enfo124 ~]# service crond startStarting crond: [ OK ][root@enfo124 ~]# service crond statuscrond (pid 2805) is running…[root@enfo124 ~]# su - cognos[cognos@enfo124 ~]$ service crond statuscrond (pid 2805) is running…最初sh文件内容为 ------------------------------------------------------------ #!/bin/bashexpdp username/password@enforc directory=kettledb dumpfile=enforc_$(date +%Y%m%d%H%M).dmp logfile=enforc_$(date +%Y%m%d%H%M).log ----------------------------------------------------------- 文件名字与路径 /home/oracle/bin/export_enforc.sh 部署开始，切换至oralce用户，查看oracle用户的crontab 计划（crontab -l）。进入任务计划的编辑模式（crontab -e） 添加入以下行： 30 18 * /home/oracle/bin/export_enforc.sh 每天18:30分执行export_enforc.sh文件，结果不执行，手工赋值执行/home/oracle/bin/export_enforc.sh是可以的。 于是看了前辈写的sh后说执行的环境不对于是加入以下几行： #!/bin/bashif [ -f ~/.bash_profile ];then . ~/.bash_profilefiexpdp username/password@enforc directory=kettledb dumpfile=enforc_$(date +%Y%m%d%H%M).dmp logfile=enforc_$(date +%Y%m%d%H%M).log 执行命令： [oracle@enfo212 ~]$ cd ~/[oracle@enfo212 ~]$ pwd/home/username ———-可以看出来~/代表用户家目录/home/username。 . 文件= bash 文件 （执行shell文件） 由此可以看出-f查找如果目录存在这个系统环境文件则执行，建造一个shell环境，每个用户都有自己的.bash_profile 再次部署到crontab里面可以看到： 随便部署一个将要发生的时间点，任务被执行，这样就每天在这个时间点就对数据库enforc坐了导出的工作 具体为什么加入哪些代码？可以参考 /home/username/.bash_profile 文件 PS：总结crontab任务不执行可以从这些方面入手 1：请确保手工可以执行该文件（给sh文件增加X权限，看文件格式是否为unix→ set ff? →set ff=unix） 2：确认开始crond服务（service crond status/start/stop） 3: 确认给sh文件制定bash环境 if [ -f ~/.bash_profile ];then . ~/.bash_profilefi]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[xhprof install]]></title>
    <url>%2F2016%2F04%2F18%2Fxhprof-install%2F</url>
    <content type="text"><![CDATA[安装下载/解压下载地址：http://pecl.php.net/package/xhprof cd /data/soft wget http://pecl.php.net/get/xhprof-0.9.4.tgz tar -zxf xhprof-0.9.4.tgz 编译/安装cd xhprof-0.9.4 cd extension/ phpize ./configure --with-php-config=/usr/local/php/bin/php-config #上面的路径是自己本机PHP的配置文件路径 make &amp;&amp; make install #此处完成后会显示出 xhprof.so 所在的路径,将该文件复制到PHP扩展的目录 cp /data/soft/xhprof-0.9.4/extension/modules/xhprof.so /usr/local/php/lib/php/extensions/no-debug-non-zts-20090626/ 这里的目标地址是 php.ini 中 extension_dir 的值。如果 php.ini 中没有 extension_dir 这一项，自己添加到并配置一个目录，然后将 .so 文件复制到其中。 建立分析结果导出目录： mkdir -p /data/xhprof/xhprof_data mkdir -p /usr/local/php/include/xhprof/ 在 php-fpm.conf 中添加: env[XHPROF_ROOT_PATH] = /usr/local/php/include/xhprof/ #后面在PHP代码中可以通过 $_SERVER[&apos;XHPROF_ROOT_PATH&apos;] 来引用,比较方便。 将 xhprof 解压目录下的 xhprof_lib 复制到上面目录中.此步目的是以后在程序中引用里面的类库时更方便，如果不执行该步也可以。 cp -r /data/soft/xhprof-0.9.4/xhprof_lib/ /usr/local/php/include/xhprof/xhprof_lib yum install -y graphviz #安装图形绘制工具,后面的结果可以通过该工具以图形显示,更直观 查看安装结果重新加载 php 配置文件 service php-fpm reload 在 WEB 页面上查看 phpinfo 或者在命令行中执行： php -i | grep xhprof 结果： xhprof xhprof =&gt; 0.9.2 分析结果查看配置cp -r /data/soft/xhprof-0.9.4/xhprof_html /data/xhprof/xhprof_data/xhprof_html 使用在 PHP 页面顶部加上： xhprof_enable(XHPROF_FLAGS_NO_BUILTINS + XHPROF_FLAGS_MEMORY); 在页面底部加上： $xhprof_data = xhprof_disable(); include_once $_SERVER[&apos;XHPROF_ROOT_PATH&apos;] . &quot;/xhprof_lib/utils/xhprof_lib.php&quot;; include_once $_SERVER[&apos;XHPROF_ROOT_PATH&apos;] . &quot;/xhprof_lib/utils/xhprof_runs.php&quot;; $xhprof_runs = new XHProfRuns_Default(); //数据会保存在php.ini中xhprof.output_dir设置的目录去中 $run_id = $xhprof_runs-&gt;save_run($xhprof_data, str_replace(&quot;.&quot;, &quot;_&quot;, basename(__FILE__))); //第二个参数是定义文件名称 分析结果访问上面的页面后，在结果目录发现有如下文件产生： ls -l /data/xhprof/xhprof_data/ 总用量 32 -rw-r--r-- 1 www www 16080 12月 4 21:24 548060a27725b.co_main_php.xhprof -rw-r--r-- 1 www www 16076 12月 4 21:24 548060a2c49f7.co_main_php.xhprof 请求页面：http://yourdomain/xhprof_html/index.php 页面结果： No XHProf runs specified in the URL.Existing runs:548060a2c49f7.co_main_php.xhprof 2014-12-04 21:24:50548060a27725b.co_main_php.xhprof 2014-12-04 21:24:50 即上面显示的生成的结果文件。点击一个文件查看详细结果，得到：]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[查询所有数据库占用磁盘空间大小的和查询单个库中所有表磁盘占用大小的]]></title>
    <url>%2F2016%2F01%2F15%2F%E6%9F%A5%E8%AF%A2%E6%89%80%E6%9C%89%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8D%A0%E7%94%A8%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E5%A4%A7%E5%B0%8F%E7%9A%84%E5%92%8C%E6%9F%A5%E8%AF%A2%E5%8D%95%E4%B8%AA%E5%BA%93%E4%B8%AD%E6%89%80%E6%9C%89%E8%A1%A8%E7%A3%81%E7%9B%98%E5%8D%A0%E7%94%A8%E5%A4%A7%E5%B0%8F%E7%9A%84%2F</url>
    <content type="text"><![CDATA[查询所有数据库占用磁盘空间大小的SQL语句： 复制代码 代码如下: select TABLE_SCHEMA, concat(truncate(sum(data_length)/1024/1024,2),’ MB’) as data_size,concat(truncate(sum(index_length)/1024/1024,2),’MB’) as index_sizefrom information_schema.tablesgroup by TABLE_SCHEMAorder by data_length desc;查询单个库中所有表磁盘占用大小的SQL语句： 复制代码 代码如下: select TABLE_NAME, concat(truncate(data_length/1024/1024,2),’ MB’) as data_size,concat(truncate(index_length/1024/1024,2),’ MB’) as index_sizefrom information_schema.tables where TABLE_SCHEMA = ‘TestDB’group by TABLE_NAMEorder by data_length desc;以上语句测试有效，注意替换以上的TestDB为数据库名]]></content>
      <categories>
        <category>mysql</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[查看Linux版本系统信息方法汇总]]></title>
    <url>%2F2016%2F01%2F04%2F%E6%9F%A5%E7%9C%8BLinux%E7%89%88%E6%9C%AC%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[查看Linux版本系统信息方法汇总 Linux下如何查看版本信息， 包括位数、版本信息以及CPU内核信息、CPU具体型号等等，整个CPU信息一目了然。 1、# uname －a （Linux查看版本当前操作系统内核信息） Linux localhost.localdomain 2.4.20-8 #1 Thu Mar 13 17:54:28 EST 2003 i686 athlon i386 GNU/Linux 2、# cat /proc/version （Linux查看当前操作系统版本信息） Linux version 2.4.20-8 (bhcompile@porky.devel.redhat.com) (gcc version 3.2.2 20030222 (Red Hat Linux 3.2.2-5)) #1 Thu Mar 13 17:54:28 EST 2003 3、# cat /etc/issue 或cat /etc/redhat-release（Linux查看版本当前操作系统发行版信息） Red Hat Linux release 9 (Shrike) 4、# cat /proc/cpuinfo （Linux查看cpu相关信息，包括型号、主频、内核信息等） processor : 0 vendor_id : AuthenticAMD cpu family : 15 model : 1 model name : AMD A4-3300M APU with Radeon(tm) HD Graphics stepping : 0 cpu MHz : 1896.236 cache size : 1024 KB fdiv_bug : no hlt_bug : no f00f_bug : no coma_bug : no fpu : yes fpu_exception : yes cpuid level : 6 wp : yes flags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 syscall mmxext lm 3dnowext 3dnow bogomips : 3774.87 5、# getconf LONG_BIT （Linux查看版本说明当前CPU运行在32bit模式下， 但不代表CPU不支持64bit） 32 6、# lsb_release -a]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[swfUpload简单应用]]></title>
    <url>%2F2015%2F12%2F12%2FswfUpload%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8%2F</url>
    <content type="text"><![CDATA[什么是SWFUploadSWFUpload是一个网站前端文件上传组件。SWFUpload通过flash+javascript，实现在不刷新网页的条件下，多个文件批量上传（实际上是逐个上传）、以及显示上传进度。 ## SWFUpload基本原理1、传统的html表单文件上传传统的文件上传是使用下面这种Form的：1&amp;lt;&amp;lt;/code&amp;gt;formid`=&quot;file-form&quot;` `action=&quot;[http://www.gearcode.com/upload.php](http://www.gearcode.com/upload.php)&quot;` `enctype=&quot;multipart/form-data&quot;` `method=&quot;post&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;2&lt;/td&gt; &lt;td&gt;&nbsp;&nbsp;&nbsp;&nbsp;&amp;lt;&amp;lt;/code&amp;gt;`input `name=&quot;filename&quot;` `type=&quot;file&quot;` `/&amp;gt;`&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;`3`&lt;/td&gt; &lt;td&gt; `&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&lt;&lt;/code&gt;inputtype=“submit”value=“上传”/&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;4&lt;/td&gt; &lt;td&gt;&lt;/&lt;/code&gt;form&gt;` 这样的表单，每个inputfile只能选择一个文件，如果用户想批量上传，则需要使用js动态的向表单中添加“”。用户则需要去点击每一个inputfile的“浏览”按钮，打开选择文件的窗口去逐个选择文件。而不是打开一个能选择多个文件的窗口，一次性的使用ctrl或shift等快捷键选择一个或多个文件。 而且，当用户选择好文件，点击上传后，表单就会提交出去，至于文件上传的进度如何，上传速度怎样，都不得而知。 2、使用SWFUpload后的上传 SWFUpload通过向网页中插入一个flash按钮，让用户点击来弹出文件选择的对话框。也就是说，选择文件对话框，是由swfupload.swf中弹出的，当然这需要用户点击这个flash才可以。所以swfupload在初始化时需要设置它显示出来的按钮的样式，例如宽、高、背景色、字体、内间距、图片等等……。除了这些样式，还需要设置按钮显示的位置，以及其他一些配置，这些常用配置在本文的后面会详细介绍。 因为SWFUpload的选择文件对话框是由flash弹出的，所以这个对话框是可以选择多个文件的。选择好文件以后，swfupload.swf会回调一些javascript函数，将选择文件的一些基本信息作为参数传给这些回调函数，以便开发者通过设置这些回调函数，来改变html从而将这些文件信息显示到页面中。 在选择好要上传的文件后，这些文件就会被加入到swfupload的上传队列中，一旦调用swfupload实例的“startUpload()”函数，swfupload就会通过flash将文件上传到我们指定的地址，这个上传地址也是可以在实例化SWFUpload时设置的，而这个地址则是一个接收文件的action，例如传统文件上传表单中的action=”upload.php”。这里需要注意的是，调用startUpload后，swfupload只会将上传文件队列中的第一个未上传的文件提交出去，而不是同时将上传文件队列中所有的文件提交出去，如果在一个文件上传完毕后，再次调用startUpload，swfupload就会开始上传队列中下一个没有上传的文件。所以，如果想实现自动批量上传的话，只需要在上传完成的回调函数中，去调用startUpload就可以了。 在上传过程中，swfupload会有很多的事件产生，例如上传开始、上传进度变化、上传出错、上传成功、上传完成……我们可以设置这些事件的回调函数，swfupload在发生这些事件的时候，会去调用我们的回调函数，并将相应的信息以参数的形式发送给我们的回调函数。这样我们便可以通过处理这些事件来动态的显示文件上传的状态、进度等信息了。 开始前的准备1、获取SWFUpload SWFUpload的官方地址为：http://www.swfupload.org/，SWFUpload的下载放在了googlecode上：http://code.google.com/p/swfupload/downloads/list，此文使用的是：SWFUploadv2.2.0.1。 2、在线文档 http://demo.swfupload.org/Documentation/ 3、SWFUpload 2.2 的Demos http://demo.swfupload.org/v220/index.htm 使用SWFUpload上传文件1、初始化SWFUpload 首先将下载下来的“SWFUploadv2.2.0.1 Core”压缩包解压，会得到一个swfupload.js、以及一个swfupload.swf（在Flash目录中），将这两个文件copy到你的项目中。压缩包中还会有一些其他的文件，例如英文的文档、ChangeLog、License等文件，不在本文讨论范围内，实际应用时也无需导入到你的项目中。 在使用SWFUpload上传组件的页面引入swfupload.js： 1&amp;lt;&amp;lt;/code&amp;gt;scripttype`=&quot;text/javascript&quot;` `src=&quot;[http://www.gearcode.com/lib/swfupload/swfupload.js](http://www.gearcode.com/lib/swfupload/swfupload.js)&quot;` `type=&quot;text/javascript&quot;&gt;&lt;/&lt;/code&gt;script&gt;` 这个swfupload.js是SWFUpload组件提供的一个javascript类库，是用来初始化及设置swfupload.swf的。其中有一个名为“SWFUpload”的function，我们通过创建这个function的实例来初始化SWFUpload，同时传入一些初始化配置信息。需要注意的是，一定要在网页加载完成后再去new这个SWFUpload，因为swfupload.swf是通过替换掉页面中的一个html元素来确定自己显示出来的位置的。所以如果在这个html元素还没被创建出来的时候，就去实例化SWFUpload的话，就会出现javascript错误。 实例化SWFUpload，并设置初始化参数： 01var swfu;02// 这里使用了JQuery，在body onload后，也就是网页加载完成后，实例化SWFUpload。03$(`function(){`&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;`04`&lt;/td&gt; &lt;td&gt; `&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;swfu=newSWFUpload(config == undefined ?{&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;05&lt;/td&gt; &lt;td&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;upload_url : path+“/fileUpload.action”,`&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;`06`&lt;/td&gt; &lt;td&gt; `&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;flash_url:path+&quot;/plugin/uploader/SWFUpload/swfupload.swf&quot;,&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;07&lt;/td&gt; &lt;td&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file_size_limit :` `&quot;20 KB&quot;,&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;08&lt;/td&gt; &lt;td&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file_types :` `&quot;*.jpg;*.jpeg;*.png;*.bmp;*.gif&quot;,&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;09&lt;/td&gt; &lt;td&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file_types_description :` `&quot;All Image Files&quot;,&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;10&lt;/td&gt; &lt;td&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file_post_name :` `&quot;fileQueue&quot;,&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;11&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;wbr&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;12&lt;/td&gt; &lt;td&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button_placeholder_id :` `&quot;spanSWFUploaon&quot;,&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;13&lt;/td&gt; &lt;td&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button_width : 60,`&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;`14`&lt;/td&gt; &lt;td&gt; `&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;button_height: 20,&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;15&lt;/td&gt; &lt;td&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button_text :` `&quot;**添加文件**&quot;,&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;16&lt;/td&gt; &lt;td&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button_text_left_padding : 3,`&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;`17`&lt;/td&gt; &lt;td&gt; `&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;button_text_top_padding: 2,&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;18&lt;/td&gt; &lt;td&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button_cursor : SWFUpload.CURSOR.HAND,`&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;`19`&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;wbr&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;`20`&lt;/td&gt; &lt;td&gt; `&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;//handler&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;21&lt;/td&gt; &lt;td&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file_queued_handler : Handler.fileQueued,`&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;`22`&lt;/td&gt; &lt;td&gt; `&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;file_queue_error_handler: Handler.fileQueueError,&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;23&lt;/td&gt; &lt;td&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;upload_complete_handler : Handler.uploadComplete,`&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;`24`&lt;/td&gt; &lt;td&gt; `&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;upload_start_handler: Handler.uploadStart,&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;25&lt;/td&gt; &lt;td&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;upload_progress_handler : Handler.uploadProgress,`&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;`26`&lt;/td&gt; &lt;td&gt; `&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;upload_success_handler: Handler.uploadSuccess&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;27&lt;/td&gt; &lt;td&gt;&nbsp;&nbsp;&nbsp;&nbsp;});&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;28&lt;/td&gt; &lt;td&gt;});` 通过上面的代码可以创建一个SWFUpload的实例“swfu”，后面对文件队列的操作都需要通过调用这个实例的方法来完成。 初始化参数中“button_placeholder_id”为页面上的一个html节点的ID，成功初始化SWFUpload后，会将此节点替换为swfupload.swf。其他以“button_”开头的参数都是用来设置swfupload.swf的显示样式的。大部分初始化参数非常简单，这里不一一赘述，用户可以查阅前面提到的SWFUpload的在线文档。这里有一点需要注意，初始化SWFUpload后，页面上对应的html节点被替换为我们设置的flash按钮，但如果你的页面不是以http协议打开的，点击这个按钮是不会弹出选择文件对话框的。 例如，我直接在桌面上的文件夹中打开页面： file:///C:/Documents andSettings/JasonLee/桌面/upload/upload.html 以这样的方式打开页面，点击flash按钮是不会弹出选择文件对话框的。所以测试的时候要将页面上传部署到服务器上，以http协议打开，例如： http://www.gearcode.com/demo/file-upload/upload.html 2、开始上传 完成初始化以后，点击flash上传按钮便会打开选择文件对话框。选择好文件后，对话框关闭，被选择的文件将进入上传队列。如果要开始上传，只需要调用SWFUpload的startUpload函数即可，例如： 1swfu.startUpload(); 但是如果队列中有多个文件，调用startUpload()后只会上传第一个未上传的文件，所以前面提到了，SWFUpload的批量上传实际上就是自动逐个上传文件。如果要实现自动批量上传只需要在上传文件成功后，再次调用开始上传方法。我们可以通过设置SWFUpload的handler函数来实现： 1upload_complete_handler:function`(file) {&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;2&lt;/td&gt; &lt;td&gt;&nbsp;&nbsp;&nbsp;&nbsp;this.startUpload();&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;3&lt;/td&gt; &lt;td&gt;}` 3、handler函数 SWFUpload在工作的过程中，会产生很多事件。这些事件对我们来说有很多用处（例如想在页面中显示文件大小、上传进度、速度等信息），我们可以设置handler函数来监控这些事件，当SWFUpload触发这些事件时，会主动调用我们设置的回调函数，并将文件信息作为参数传递给我们的回调函数。 SWFUpload的handler函数有很多，这里只介绍以下6个常用的事件回调函数： 事件名称初始化参数名称参数事件触发fileQueuedfile_queued_handlerfile每个文件进入上传队列时触发fileQueueErrorfile_queue_error_handlerfile, errorCode, message每个文件进入上传队列时，如果出错则触发uploadStartupload_start_handlerfile每个文件开始上传时触发uploadProgressupload_progress_handlerfile, bytesLoaded, bytesTotal每个文件的上传进度发生改变时触发uploadSuccessupload_success_handlerfile, serverData每个文件上传成功后触发uploadCompleteupload_complete_handlerfile每个文件上传完毕后触发 例如我需要监听uploadProgress事件，则需要在SWFUpload初始化时，设置upload_progress_handler参数的值： 1swfu = newSWFUpload({2&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;`//省略其他初始化参数…&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;3&lt;/td&gt; &lt;td&gt;&nbsp;&nbsp;&nbsp;&nbsp;upload_progress_handler:uploadProgress&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;4&lt;/td&gt; &lt;td&gt;});` 然后再建立监听事件的回调函数： 1function uploadProgress(file, bytesLoaded, bytesTotal) {2&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;&amp;nbsp;&lt;wbr&gt;`//…&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;div&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;3&lt;/td&gt; &lt;td&gt;}` 这样，在文件上传时，每次上传进度发生改变，都会调用uploadProgress这个函数，并且将文件的信息、已经上传的字节数、文件的总字节数发送给回调函数。 其他的回调函数使用方法都一样，这里就不一一介绍了，最后介绍一下回调函数的参数file。几乎所有的回调函数都会将file作为参数，file是一个javascript对象，其结构如下（来自官方的在线文档）： { &nbsp;&nbsp;&nbsp; id :string, &nbsp;&nbsp; &nbsp;index :number, &nbsp;&nbsp; &nbsp;name :string, &nbsp;&nbsp; &nbsp;size :number, &nbsp;&nbsp; &nbsp;type :string, &nbsp;&nbsp; &nbsp;creationdate: Date, &nbsp;&nbsp;&nbsp;modificationdate : Date, &nbsp;&nbsp; &nbsp;filestatus :number, } 下面是file对象中的每个属性的简单说明： 属性名类型说明idstringSWFUpload为队列中的文件生成的IDindexnumber文件的索引值，使用getFile(index)可以获取该文件namestring原文件名，不包含原文件目录sizenumber文件的尺寸，单位：bytetypestring文件类型creationdateDate文件的创建时间modificationdateDate文件的最后修改时间filestatusnumber文件在上传队列中的状态，可以使用SWFUpload.FILE_STATUS比较值 取消上传的图片&nbsp;&nbsp;this.cancelUpload(); 结束语至此，我们已经掌握了SWFUpload的基本使用方法。因为作者技术不精，ActionScript的知识基本为零，所以就不再深入分析SWFupload的代码了。我在写文章的同时，制作了一个demo，代码很丑，只供菜鸟下载： SWFUpload-demo.zip &lt;/div&gt;]]></content>
      <categories>
        <category>js插件</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[linux下SVN仓库间数据转移或重命名]]></title>
    <url>%2F2015%2F08%2F12%2Flinux%E4%B8%8BSVN%E4%BB%93%E5%BA%93%E9%97%B4%E6%95%B0%E6%8D%AE%E8%BD%AC%E7%A7%BB%E6%88%96%E9%87%8D%E5%91%BD%E5%90%8D%2F</url>
    <content type="text"><![CDATA[假设将A仓库的数据转移到B仓库 A位置：/svndata/A B位置：/svndata/B 不能直接将A仓库重命名为B，或将A复制得到一个复本，再将复本命名为B使用svnadmin dump &amp; svnadmin load创建B仓库(如果B不存在)svnadmin create /svndata/B得到A仓库.dump文件A.dumpsvnadmin dump /svndata/A &gt; A.dump将A.dump 加载到B仓库svnadmin load /svndata/B &lt; A.dump使用dump&amp;load方法只将A管理的文件复制到B中，但是A的配置信息（密码等）没有被复制到B中]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>svn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux-php安装redis扩展的]]></title>
    <url>%2F2015%2F04%2F23%2Flinux-php%E5%AE%89%E8%A3%85redis%E6%89%A9%E5%B1%95%E7%9A%84%2F</url>
    <content type="text"><![CDATA[1、安装redis 下载：https://github.com/nicolasff/phpredis/archive/2.2.4.tar.gz 上传phpredis-2.2.4.tar.gz到/usr/local/src目录 cd /usr/local/src #进入软件包存放目录 tar zxvf phpredis-2.2.4.tar.gz #解压 cd phpredis-2.2.4 #进入安装目录 /usr/local/php/bin/phpize #用phpize生成configure配置文件 ./configure –with-php-config=/usr/local/php/bin/php-config #配置 make #编译 make install #安装 安装完成之后，出现下面的安装路径 /usr/local/php/lib/php/extensions/no-debug-non-zts-20090626/ 备注：这里可能路径不一样，具体路径去php.ini看 2、配置php支持 vi /usr/local/php/etc/php.ini #编辑配置文件，在最后一行添加以下内容 添加 extension=redis.so :wq! #保存退出 3 重启服务 sudo service nginx restart sudo /etc/init.d/php-fpm restart]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[solr更新数据]]></title>
    <url>%2F2015%2F04%2F12%2Fsolr%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[$str = &apos;108752267 2 http://www.hahah.cn/1.jpg &apos;; $update_response = $this -&gt; client -&gt; request($str); $this -&gt; client-&gt;commit(); $response = $update_response-&gt;getResponse(); print_r($response);]]></content>
      <categories>
        <category>solr</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[vagrant启动之后网卡2找不到]]></title>
    <url>%2F2015%2F04%2F04%2Fvagrant%E5%90%AF%E5%8A%A8%E4%B9%8B%E5%90%8E%E7%BD%91%E5%8D%A12%E6%89%BE%E4%B8%8D%E5%88%B0%2F</url>
    <content type="text"><![CDATA[vagrant启动之后网卡2找不到 或者ifconfig后没有网卡二的修改 /etc/udev/rules.d/70-persistent-net.rules 找到该文件 把文件的的eth1删除 之后把eth2改成eth1就可以了。]]></content>
      <categories>
        <category>vagrant</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[提示磁盘VBoxManage.exe:满]]></title>
    <url>%2F2015%2F03%2F24%2F%E6%8F%90%E7%A4%BA%E7%A3%81%E7%9B%98VBoxManage-exe-%E6%BB%A1%2F</url>
    <content type="text"><![CDATA[VBoxManage.exe: error: Could not create the clone medium ‘C:\Users\lizongxue\VirtualBox VMs\nginx_web_conf_default_1417763838159_49997\box-disk1.vmdk’.VBoxManage.exe: error: VMDK: cannot write allocated data block in ‘C:\Users\lizongxue\VirtualBox VMs\nginx_web_conf_default_1417763838159_49997/box-disk1.vmdk’(VERR_DISK_FULL)VBoxManage.exe: error: Details: code VBOX_E_FILE_ERROR (0x80bb0004), component Appliance, interface IApplianceVBoxManage.exe: error: Context: “int __cdecl handleImportAppliance(struct HandlerArg *)” at line 781 of file VBoxManageAppliance.cpp mkdir E:\XP/vms “C:\Program Files\Oracle\VirtualBox\VBoxManage” setproperty machinefolderE:\XP/vms]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[图片缓存:浏览器刷新 和 304 Not Modified 与 If-Modified-Since]]></title>
    <url>%2F2015%2F03%2F13%2F%E5%9B%BE%E7%89%87%E7%BC%93%E5%AD%98-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%88%B7%E6%96%B0-%E5%92%8C-304-Not-Modified-%E4%B8%8E-If-Modified-Since%2F</url>
    <content type="text"><![CDATA[今天在用chrome浏览淘宝页面的时候，发现很多来自淘宝图片HTTP状态码是 304 Not Modified 到百度搜索了一下，明白了 304状态的含义（以下绿色内容来自网络）： 304 Not Modified：客户端有缓冲的文件并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。 如果客户端在请求一个文件的时候，发现自己缓存的文件有 Last Modified ，那么在请求中会包含 If Modified Since ，这个时间就是缓存文件的 Last Modified 。因此，如果请求中包含 If Modified Since，就说明已经有缓存在客户端。只要判断这个时间和当前请求的文件的修改时间就可以确定是返回 304 还是 200 。对于静态文件，例如：CSS、图片，服务器会自动完成 Last Modified 和 If Modified Since 的比较，完成缓存或者更新。但是对于动态页面，就是动态产生的页面，往往没有包含 Last Modified 信息，这样浏览器、网关等都不会做缓存，也就是在每次请求的时候都完成一个 200 的请求。 我突然想起我所写的图片服务器没有实现HTTP 304 缓存功能。 这个 304 状态一般主要在用户刷新页面(F5键)的时候触发.当用户在刷新页面的时候，因为原来的页面里的很多图片已经缓存过，客户端的浏览器已经记录了图片的最后更新时间(Last Mod)，所以在用户刷新页面的时候，会向服务器提交一个字段：If-Modified-Since: Wed, 08 Sep 2010 21:35:06 GMT 这个时候，服务器端的程序先取得这个字段的值，然后与服务器上的图片最后修改时间对比，如果相同，就直接返回 304 Not Modified ，然后停止。这样就不用把图片重新传输到客户端，达到节省带宽的目的。 关于 Cache-Control: max-age=秒 和 Expires Expires = 时间，HTTP 1.0 版本，缓存的载止时间，允许客户端在这个时间之前不去检查（发请求）max-age = 秒，HTTP 1.1版本，资源在本地缓存多少秒。如果max-age和同时存在，则被Cache-Control的max-age覆盖。 Expires 的一个缺点就是，返回的到期时间是服务器端的时间，这样存在一个问题，如果客户端的时间与服务器的时间相差很大，那么误差就很大，所以在HTTP 1.1版开始，使用Cache-Control: max-age=秒替代。 今天我还发现一个小的问题，是关于客户端的日期格式： Wed, 08 Sep 2010 21:35:06 GMT 与 Wed, 8 Sep 2010 21:35:06 GMT 注意上面的格式，一个是8的前面有个前置的0，一个没有。 我发现firefox和chrome对这个日期格式处理一致，ie有点不同。最终我修改了服务器端的程序：//HTTP 日期格式: Wed, 08 Sep 2010 21:35:06 GMTDateFormat dateFormatGMT = new SimpleDateFormat(“EEE, dd MMM yyyy HH:mm:ss z”, Locale.ENGLISH); //时间格式]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[症状：Call to undefined function PMA_sanitize() in Message.class.p]]></title>
    <url>%2F2015%2F03%2F04%2F%E7%97%87%E7%8A%B6%EF%BC%9ACall-to-undefined-function-PMA-sanitize-in-Message-class-p%2F</url>
    <content type="text"><![CDATA[如题，那天下了个phpmyadmin3.4.7.1版本的在服务器上（windows）结果打开的时候出现Call to undefined function PMA_sanitize()错误，不是于是乎我就开始找答案 定位到message.class.php那个文件，搜索PMA_sanitize 找到那句话：return PMA_sanitize($message, false, true); 一看这句话，怎么有点不对事呢？ 好吧，我给他改下，这句话有问题呀，改成如下：return PMA_message::sanitize($message); 好了，保存，再打开phpmyadmin，一切OK！！！]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>phpmyadmin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysqlbinlog]]></title>
    <url>%2F2015%2F02%2F19%2Fmysqlbinlog%2F</url>
    <content type="text"><![CDATA[MySQL数据库恢复(使用mysqlbinlog命令) binlog是通过记录二进制文件方式来备份数据，然后在从二进制文件将数据恢复到某一时段或某一操作点。1：开启binlog日志记录修改mysql配置文件mysql.ini，在[mysqld]节点下添加复制代码 代码如下: log-binlog-bin = E:/log/logbin.log 路径中不要包含中文和空格。重启mysql服务。通过命令行停止和启动mysql服务复制代码 代码如下: c:>net stop mysql;c:>net start mysql; 进入命令行进入mysql并查看二进制日志是否已经启动Sql代码复制代码 代码如下: mysql&gt;show variables like ‘log_%’; 日志成功开启后，会在E:/log/目录下创建logbin.index和logbin.000001两个文件。logbin.000001就是数据库的备份文件，以后就可以通过此文件对数据库进行恢复操作。 2：查看备份的二进制文件Sql代码复制代码 代码如下: c:\mysql\bin>mysqlbinlog e:/log/logbin.000001 日后记录的操作多了，命令行方式基本就用不上了。可以使用将日志导出文件的方式来查看日志内容2.1 导出Xml代码复制代码 代码如下: c:\mysql\bin>mysqlbinlog e:/log/logbin.000001 &gt; e:/log/log.txt “&gt;”: 导入到文件中; “&gt;&gt;”: 追加到文件中如果有多个日志文件Sql代码复制代码 代码如下: c:\mysql\bin> mysqlbinlog e:/log/logbin.000001 &gt; e:/log/log.sqlc:\mysql\bin> mysqlbinlog e:/log/logbin.000002 &gt;&gt; e:/log/log.sq 2.2 按指定位置导出：Sql代码复制代码 代码如下: c:\mysql\bin>mysqlbinlog –start-position=185 –stop-position=338 e:/log/logbin.000001 &gt; e:/log/log3.txt 2.3 按指定时间导出：Xml代码复制代码 代码如下: c:\mysql\bin>mysqlbinlog –start-datetime=”2010-01-07 11:25:56” –stop-datetime=”2010-01-07 13:23:50” e:/log/logbin.000001 &gt; e:/log/log_by_date22.txt 3：从备份恢复数据库做了一次更新操作，之后日志的内容如下：Sql代码复制代码 代码如下: ;;DELIMITER ; at 4#110107 13:23:50 server id 1 end_log_pos 106 Start: binlog v 4, server v 5.1.53-community-log created 110107 13:23:50 at startup Warning: this binlog is either in use or was not closed properly.ROLLBACK;BINLOG ‘ZqMmTQ8BAAAAZgAAAGoAAAABAAQANS4xLjUzLWNvbW11bml0eS1sb2cAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmoyZNEzgNAAgAEgAEBAQEEgAAUwAEGggAAAAICAgC‘; at 106#110107 13:26:58 server id 1 end_log_pos 185 Query thread_id=44 exec_time=1 error_code=0SET TIMESTAMP=1294378018;SET @@session.pseudo_thread_id=44;SET @@session.foreign_key_checks=1, @@session.sql_auto_is_null=1, @@session.unique_checks=1, @@session.autocommit=1;SET @@session.sql_mode=1344274432;SET @@session.auto_increment_increment=1, @@session.auto_increment_offset=1;;SET @@session.character_set_client=33,@@session.collation_connection=33,@@session.collation_server=33;SET @@session.lc_time_names=0;SET @@session.collation_database=DEFAULT;BEGIN; at 185#110107 13:26:58 server id 1 end_log_pos 338 Query thread_id=44 exec_time=1 error_code=0use ncl-interactive;SET TIMESTAMP=1294378018;UPDATE t_system_id SET id_value=’3000’ WHERE (table_name=’t_working_day’); at 338#110107 13:26:58 server id 1 end_log_pos 365 Xid = 8016COMMIT;DELIMITER ;DELIMITER ;DELIMITER ; End of log fileROLLBACK ;;;;DELIMITER ; at 4#110107 13:23:50 server id 1 end_log_pos 106 Start: binlog v 4, server v 5.1.53-community-log created 110107 13:23:50 at startup Warning: this binlog is either in use or was not closed properly.ROLLBACK;BINLOG ‘ZqMmTQ8BAAAAZgAAAGoAAAABAAQANS4xLjUzLWNvbW11bml0eS1sb2cAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmoyZNEzgNAAgAEgAEBAQEEgAAUwAEGggAAAAICAgC‘; at 106#110107 13:26:58 server id 1 end_log_pos 185 Query thread_id=44 exec_time=1 error_code=0SET TIMESTAMP=1294378018;SET @@session.pseudo_thread_id=44;SET @@session.foreign_key_checks=1, @@session.sql_auto_is_null=1, @@session.unique_checks=1, @@session.autocommit=1;SET @@session.sql_mode=1344274432;SET @@session.auto_increment_increment=1, @@session.auto_increment_offset=1;;SET @@session.character_set_client=33,@@session.collation_connection=33,@@session.collation_server=33;SET @@session.lc_time_names=0;SET @@session.collation_database=DEFAULT;BEGIN; at 185#110107 13:26:58 server id 1 end_log_pos 338 Query thread_id=44 exec_time=1 error_code=0use ncl-interactive;SET TIMESTAMP=1294378018;UPDATE t_system_id SET id_value=’3000’ WHERE (table_name=’t_working_day’); at 338#110107 13:26:58 server id 1 end_log_pos 365 Xid = 8016COMMIT;DELIMITER ;DELIMITER ;DELIMITER ; End of log fileROLLBACK ;; 3.1 恢复：Sql代码复制代码 代码如下: c:\mysql\bin>mysqlbinlog e:/log/logbin.000001 | mysql -u root -p 3.2 按指定位置恢复：Sql代码复制代码 代码如下: c:\mysql\bin>mysqlbinlog –start-position=185 –stop-position=338 e:/log/logbin.000001 | mysql -u root -p 3.3 按指定时间恢复：Xml代码复制代码 代码如下: c:\mysql\bin>mysqlbinlog –start-datetime=”2010-01-07 11:25:56” –stop-datetime=”2010-01-07 13:23:50” e:/log/logbin.000001 | mysql -u root -p 3.4 通过导出的脚本文件恢复Sql代码复制代码 代码如下: c:\mysql\bin>mysql -e “source e:/log/log.sql” 4.其他常用操作4.1 查看所有日志文件 Sql代码复制代码 代码如下: mysql&gt;show master logs; 4.2 当前使用的binlog文件Sql代码复制代码 代码如下: mysql&gt;show binlog events \g; 4.3 产生一个新的binlog日志文件Sql代码复制代码 代码如下: mysql&gt;flush logs; 4.4 删除所有二进制日志，并从新开始记录（注意：reset master命令会删除所有的二进制日志）Sql代码复制代码 代码如下: mysql &gt; flush logs;mysql &gt; reset master; 4.5 快速备份数据到sql文件 Sql代码复制代码 代码如下: c:\mysql\bin&gt;mysqldump -u root -p –opt –quick interactive &gt; e:/log/mysqldump.sql 为了方便查看，把从脚本恢复的命令在写一次Sql代码复制代码 代码如下: c:\mysql\bin>mysql -e “source e:/log/mysqldump.sql”]]></content>
      <categories>
        <category>mysql</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ps aux用法]]></title>
    <url>%2F2015%2F02%2F12%2Fps-aux%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[[root@node20 updateDB]# ps aux|grep ./update_stock root 14232 0.0 0.0 5928 724 pts/1 S+ 18:16 0:00 grep ./update_stock root 25021 0.0 0.0 3056 816 ? S Apr12 0:03 ./update_stock ps aux输出格式：USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND 格式说明：USER: 行程拥有者PID: pid%CPU: 占用的 CPU 使用率%MEM: 占用的记忆体使用率VSZ: 占用的虚拟记忆体大小RSS: 占用的记忆体大小TTY: 终端的次要装置号码 (minor device number of tty) STAT: 该行程的状态，linux的进程有5种状态：D 不可中断 uninterruptible sleep (usually IO)R 运行 runnable (on run queue)S 中断 sleepingT 停止 traced or stoppedZ 僵死 a defunct (”zombie”) process注: 其它状态还包括W(无驻留页), &lt;(高优先级进程), N(低优先级进程), L(内存锁页). START: 行程开始时间TIME: 执行的时间COMMAND:所执行的指令]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[批量结束kill]]></title>
    <url>%2F2015%2F02%2F08%2F%E6%89%B9%E9%87%8F%E7%BB%93%E6%9D%9Fkill%2F</url>
    <content type="text"><![CDATA[ps -ef|grep LOCAL=NO|grep -v grep|cut -c 9-15|xargs kill -9 管道符“|”用来隔开两个命令，管道符左边命令的输出会作为管道符右边命令的输入。下面说说用管道符联接起来的 几个命令： “ps - ef”是Red Hat 里查看所有进程的命令。这时检索出的进程将作为下一条命令“grep LOCAL=NO”的输入。 “grep LOCAL=NO”的输出结果是，所有含有关键字“LOCAL=NO”的进程，这是Oracle数据库中远程连接进程的共同特点。 “grep -v grep”是在列出的进程中去除含有关键字“grep”的进程。 “cut -c 9-15”是截取输入行的第9个字符到第15个字符，而这正好是进程号PID。 “xargs kill -9”中的xargs命令是用来把前面命令的输出结果（PID）作为“kill -9”命令的参数，并执行该令。 “kill -9”会强行杀掉指定进程，这样就成功清除了oracle的所有远程连接进程。其它类似的任务，只需要修改“grep LOCAL=NO”中的关键字部分就可以了。 ps -ef|grep /usr/local/apache-tomcat-document/|grep -v grep|cut -c 9-15|xargs kill -9]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>kill</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关闭mysql的日志]]></title>
    <url>%2F2015%2F01%2F22%2F%E5%85%B3%E9%97%ADmysql%E7%9A%84%E6%97%A5%E5%BF%97%E5%92%8Cvi%E6%9F%A5%E6%89%BE%E5%AD%97%E7%AC%A6%2F</url>
    <content type="text"><![CDATA[#vim /etc/my.cnf Log-bin=mysqlbin binlog_format=mixed 把上面两行注释即可]]></content>
      <categories>
        <category>mysql</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[crontab 使用方法]]></title>
    <url>%2F2015%2F01%2F15%2Fcrontab-%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[crontab file [-u user]-用指定的文件替代目前的crontab。crontab-[-u user]-用标准输入替代目前的crontab.crontab-1[user]-列出用户目前的crontab.crontab-e[user]-编辑用户目前的crontab.crontab-d[user]-删除用户目前的crontab.crontab-c dir- 指定crontab的目录。crontab文件的格式：M H D m d cmd. 基本格式 : command分 时 日 月 周 命令M: 分钟（0-59）。每分钟用或者 */1表示H：小时（0-23）。（0表示0点）D：天（1-31）。m: 月（1-12）。d: 一星期内的天（0~6，0为星期天）。cmd要运行的程序，程序被送入sh执行，这个shell只有USER,HOME,SHELL这三个环境变量 crontab -e : 执行文字编辑器来设定时程表，内定的文字编辑器是 VI，如果你想用别的文字编辑器，则请先设定 VISUAL 环境变数来指定使用那个文字编辑器(比如说 setenv VISUAL joe)crontab -r : 删除目前的时程表crontab -l : 列出目前的时程表crontab file [-u user]-用指定的文件替代目前的crontab。 其中 f1 是表示分钟，f2 表示小时，f3 表示一个月份中的第几日，f4 表示月份，f5 表示一个星期中的第几天。program 表示要执行的程序。 #每天早上7点执行一次 /bin/ls :0 7 * /bin/ls在 12 月内, 每天的早上 6 点到 12 点中，每隔3个小时执行一次 /usr/bin/backup : 0 6-12/3 12 /usr/bin/backup 周一到周五每天下午 5:00 寄一封信给 alex@domain.name :0 17 1-5 mail -s “hi” alex@domain.name &lt; /tmp/maildata每月每天的午夜 0 点 20 分, 2 点 20 分, 4 点 20 分….执行 echo “haha”20 0-23/2 * echo “haha” #每天早上6点10分10 6 * date #每两个小时0 /2 date #晚上11点到早上8点之间每两个小时，早上8点0 23-7/2，8 * date #每个月的4号和每个礼拜的礼拜一到礼拜三的早上11点0 11 4 * mon-wed date #1月份日早上4点0 4 1 jan * date ------------------------------------------------------------------------------------------------------------- 30 21 * /usr/local/etc/rc.d/lighttpd restart上面的例子表示每晚的21:30重启apache。 45 4 1,10,22 /usr/local/etc/rc.d/lighttpd restart上面的例子表示每月1、10、22日的4 : 45重启apache。 10 1 6,0 /usr/local/etc/rc.d/lighttpd restart上面的例子表示每周六、周日的1 : 10重启apache。 0,30 18-23 * /usr/local/etc/rc.d/lighttpd restart上面的例子表示在每天18 : 00至23 : 00之间每隔30分钟重启apache。 0 23 6 /usr/local/etc/rc.d/lighttpd restart上面的例子表示每星期六的11 : 00 pm重启apache。 * /1 /usr/local/etc/rc.d/lighttpd restart每一小时重启apache * 23-7/1 * /usr/local/etc/rc.d/lighttpd restart晚上11点到早上7点之间，每隔一小时重启apache 0 11 4 * mon-wed /usr/local/etc/rc.d/lighttpd restart每月的4号与每周一到周三的11点重启apache 0 4 1 jan * /usr/local/etc/rc.d/lighttpd restart一月一号的4点重启apache 例子： 每两个时间值中间使用逗号分隔。除了数字还有几个个特殊的符号就是””、”/”和”-”、”,”，代表所有的取值范围内的数字，”/”代表每的意思,”*/5″表示每5个单位，”-”代表从某个数字到某个数字,”,”分开几个离散的数字。 每天早上6点 0 6 * echo “Good morning.” &gt;&gt; /tmp/test.txt //注意单纯echo，从屏幕上看不到任何输出，因为cron把任何输出都email到root的信箱了。 每两个小时 0 /2 echo “Have a break now.” &gt;&gt; /tmp/test.txt 晚上11点到早上8点之间每两个小时，早上八点 0 23-7/2，8 * echo “Have a good dream：）” &gt;&gt; /tmp/test.txt 每个月的4号和每个礼拜的礼拜一到礼拜三的早上11点 0 11 4 * 1-3 command line 1月1日早上4点 0 4 1 1 * command line 每 次编辑完某个用户的cron设置后，cron自动在/var/spool/cron下生成一个与此用户同名的文件，此用户的cron信息都记录在这个文件 中，这个文件是不可以直接编辑的，只可以用crontab -e 来编辑。cron启动后每过一份钟读一次这个文件，检查是否要执行里面的命令。因此此文件修改后不需要重新启动cron服务。 2.编辑/etc/crontab 文件配置cron cron 服务每分钟不仅要读一次/var/spool/cron内的所有文件，还需要读一次/etc/crontab,因此我们配置这个文件也能运用cron服务 做一些事情。用crontab配置是针对某个用户的，而编辑/etc/crontab是针对系统的任务。此文件的文件格式是： SHELL=/bin/bashPATH=/sbin:/bin:/usr/sbin:/usr/binMAILTO=root //如果出现错误，或者有数据输出，数据作为邮件发给这个帐号HOME=/ //使用者运行的路径,这里是根目录# run-parts01 root run-parts /etc/cron.hourly //每小时执行/etc/cron.hourly内的脚本02 4 root run-parts /etc/cron.daily //每天执行/etc/cron.daily内的脚本22 4 0 root run-parts /etc/cron.weekly //每星期执行/etc/cron.weekly内的脚本42 4 1 * root run-parts /etc/cron.monthly //每月去执行/etc/cron.monthly内的脚本]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>crontab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决vi中文乱码，更改vi显示的编码]]></title>
    <url>%2F2015%2F01%2F06%2F%E8%A7%A3%E5%86%B3vi%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%EF%BC%8C%E6%9B%B4%E6%94%B9vi%E6%98%BE%E7%A4%BA%E7%9A%84%E7%BC%96%E7%A0%81%2F</url>
    <content type="text"><![CDATA[如果系统编码不是utf8，vi看uft8编码文件时这样用： set termencoding=euc-cn encoding=utf8 如果系统编码不是gbk，vi看gbk编码文件时这样用： set termencoding=euc-cn encoding=gbk linux环境下轻松搞定文件编码这个文章介绍了 enca查看文件编码,以及icon转换文件编码 我下载了 wget http://linux.vbird.org/download/vbird/logfile-0.1-4-2.tgz 因为鸟哥是台湾的,所以用Big5繁体中文编码,,我看不懂…所以转换为gb2312才行 iconv -f big5 -t gb2312 logfile.sh -o logfile2.sh enca filename 查看文件的编码是哪一个…这个很方便,虽然要下载两个包:enca和libenca0 我用的是 debian的 sudo apt-get install enca 可以在vim下如何更改编码格式呀,,我改了半天还是乱码….. :set termencoding=euc-cn encoding=gbk :set fileencoding=gb2312 :set encoding=gb2312]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Can't connect to local MySQL server through socket]]></title>
    <url>%2F2015%2F01%2F04%2FCan-t-connect-to-local-MySQL-server-through-socket%2F</url>
    <content type="text"><![CDATA[参考网上相关的方法， 包括：（http://blog.csdn.net/lmss82/archive/2009/08/05/4414178.aspx） 方案1. 1.#ps -A|grep mysql 显示类似： 1829 ? 00:00:00 mysqld_safe 1876 ? 00:00:31 mysqld 2.#kill -9 1829 3.#kill -9 1876 4.#/etc/init.d/mysql restart 5.#mysql -u root -p 他的麻烦解决了,我的还没解决! 继续找方案2先查看 /etc/rc.d/init.d/mysqld status 看看m y s q l 是否已经启动. 另外看看是不是权限问题.[root@localhost beinan]#chown -R mysql:mysql /var/lib/mysql[root@localhost beinan]# /etc/init.d/mysqld start启动 MySQL： [ 确定 ][root@localhost lib]# mysqladmin -uroot password ‘123456’[root@localhost lib]# mysql -uroot -pEnter password:Welcome to the MySQL monitor. Commands end with ; or /g.Your MySQL connection id is 3 to server version: 4.1.11 Type ‘help;’ or ‘/h’ for help. Type ‘/c’ to clear the buffe 他的也解决了,我的麻烦还在继续,依然继续寻找 方案3问题解决了，竟然是max_connections=1000 他说太多了，然后改成500也说多，无奈删之问题解决了。 还是不行方案4 /var/lib/mysql 所有文件权限 改成mysql.mysql 不行不行 方案5 摘要：解决不能通过mysql .sock连接MySQL问题 这个问题主要提示是，不能通过 ‘/tmp/mysql .sock’连到服务器，而php标准配置正是用过’/tmp/mysql .sock’，但是一些mysql 安装方法 将 mysql .sock放在/var/lib/mysql .sock或者其他的什么地方，你可以通过修改/etc/my.cnf文件来修正它，打开文件，可以看到如下的东东： [mysql d] socket=/var/lib/mysql .sock 改一下就好了，但也会引起其他的问题，如mysql 程序连不上了，再加一点： [mysql ] socket=/tmp/mysql .sock 或者还可以通过修改php.ini中的配置来使php用其他的mysql .sock来连，这个大家自己去找找 或者用这样的方法: ln -s /var/lib/mysql /mysql .sock /tmp/mysql .sock 成功了,就是这样ln -s /var/lib/mysql /mysql .sock /tmp/mysql .sock OK! 但我的系统中没有找到mysql.sock文件，只有mysqld.sock文件，/var/run/mysqld/mysqld.sock 于是仿照上面的做法： ln -s /var/run/mysqld/mysqld.sock /tmp/mysql.sock 这样，可以正常连接数据库了 再附一篇相关文章：（http://blog.chinaunix.net/u1/43706/showart_351145.html） mysql_real_connect()试图建立到运行host的一个MySQL数据库引擎的一个连接。其函数原形为： MYSQL mysql_real_connect(MYSQL mysql, const char host, const char user, const char passwd, const char db, unsigned int port, const char *unix_socket, unsigned int client_flag) 我要编一段程序用来远程连接一个mysql数据库。我在数据库的本机上做试验，发现mysql_real_connect()的第二个参数设 为”localhost”时可以正常连接，当改写为该机器的IP地址”192.168.100.2”时就连接失败。我在程序中写的原句为：mysql_real_connect(mysql,”192.168.100.2”,”root”,””,”mydns”,0,NULL,0)。 最初，我以为将”localhost”改为”192.168.100.2”之后要将第六个参数端口号写上，但还是不行。由于我是在Linux上做的，所以 想也许需要将第七个参数unix_socket写上，结果还是不行。于是到google找解决方法，发现要远程连接mysql需要为mysql的指定帐号 设置远程连接的权限。在我的程序中，就要为root设置这一权限。事实证明，我之前连接失败正是由于这个原因导致的。但问题是，网上被广泛转贴的方法是错 误的，我照做后还不行，最后问了同学才解决的。下面我具体说一下，望大家不会再被误导。 在mysql数据库中有一个mysql库，它里面包含一个user表，里面存有所有帐号及它们的权限及特征。对应我的user表中找到User项为root的，发现有两项，其Host项分别为localhost和localhost.localdomain。我们只需要把’localhost’改为’%’就可以让所有远程机器以root帐号登陆mysql服务器。也可以将’localhost’改为某一个ip地址，这样就可以在该地址的机器上登陆mysql服务器。 这些都没有问题，只是网上被广为传颂的一个更改Host项的方法是错误的。他的方法是用update语句将指定User项的Host项改过来，如果想添加 一个新的用于远程访问的帐号，就用insert语句添加。事实是这根本不行，我按照作了，表是变了，但还是连不上。后来经过询问才知道，要想改，结合我的 情况，必须用下面的这条语句： grant all privileges on mydns. to ‘root‘@’%’；来改变root帐号的权限。如果添加新帐号也是如此。想必这个表比较特殊，用普通的SQL语句不能操作。如果帐号有密码，后面再加上identified by ‘**‘(*为你帐号的密码)就可以了。 为了解决这个问题用了一下午的时间，费了不少周折，写出来也能让大家少走些弯路。]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql常见问题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Heritrix源码分析--各个类说明]]></title>
    <url>%2F2014%2F12%2F18%2FHeritrix%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%90%84%E4%B8%AA%E7%B1%BB%E8%AF%B4%E6%98%8E%2F</url>
    <content type="text"><![CDATA[Heritrix的类的确很繁琐,往往继承了一层又一层,最多的继承好像有7层。下面就一个包一个包的说明每个类的作用，由于里面Heritrix组件分 明，很多组件没用到的同时该组件的类我也没怎么接触,所以这里会忽略一部分，如 9.org.archive.crawler.fetcher 序号 类 说明 1 FetchDNS 获取DNS数据,如IP 2 FetchFTP 获取FTP数据 3 FetchHTTP 获取HTTP数据 4 HeritrixHttpMethodRetryHandler HTTP重试处理器,重新去连接HTTP 10.org.archive.crawler.framework 序号 类 说明 1 AbstractTracker 统计器,统计抓取情况,父类，具体统计由子类实现 2 AlertManager UI界面消息管理器,给用户显示爬虫相关消息，如一些异常情况 3 Checkpointer 备份器,定时备份Heritrix相关数据,如日志、BDB文件等 4 CrawlController 控制器,控制整个爬虫的启动、暂停、停止等,Heritrix的核心类 5 CrawlScope URL范围管理器,如种子、哪些URL符合抓取哪些URL不符合抓取 6 Filter 过滤器,决定哪些URL可以抓取哪些不可以,父类,具体由子类实现 7 Frontier 调度器,对进来的URL进行调度，使其在接来下可以抓取 8 Processor 处理器,一个URL由不同的处理器(组件)合作完成,这个为处理器父类,不同的组件有不同的实现 9 ProcessorChain 处理器链,包含相同类型的处理器,如抽取URL的时候有从Html抽取的ExtractorHTML，从JavaScript抽取的ExtractorJs 10 ProcessorChainList 处理器链集合,包含多个处理器链,每个URL都会有这样一个处理器集合,使得先从该集合中获取处理器链,然后再从处理器链中获取每个处理器,最后让每个处理器都做他们的处理，完成整个抓取 11 Scoper 范围管理器,验证一个URL是否在用户配置(从order.xml中获取)的范围 12 StatisticsTracking 跟踪统计器,主要统计抓取情况,如宽带占用、抓取多少URL、抓取速度等，贯穿整个爬虫的运行 13 ToePool 线程池,用于管理爬虫线程 14 ToeThread 爬虫线程,代表着一个抓取,Heritrix的核心类,贯穿整个爬虫的运行，接下来会重点分析 15 WriterPoolProcessor 写处理器管理池,用于管理多个写处理器,可以在分布式中使用 11.org.archive.crawler.frontier 序号 类 说明 1 AbstractFrontier 调度器基本实现类,Heritrix最复杂的地方之一，接下来会重点分析 2 BdbFrontier BDB调度器,用BDB数据库去管理所有的URL,如保存哪些待抓取的URL，哪些已经抓取的URL,Heritrix最复杂的地方之一，接下来会重点分析 3 BdbMultipleWorkQueues 管理着所有的队列,所有的队列数据保存在BDB数据库中.Heritrix最复杂的地方之一，接下来会重点分析 4 BdbWorkQueue 抓取队列由BDB存储管理,相同classkey的URL为一个队列.classkey由用户配置决定，Heritrix默认是相同host的URL就为一个队列.Heritrix最复杂的地方之一，接下来会重点分析 5 FrontierJournal 调度器记录管理,记录调度器的每一次运行情况,如插入URL，插入失败URL等 6 HostnameQueueAssignmentPolicy URL ClassKey获得策略,Heritrix的默认策略，通过域名来获得URL的class key。然后相同的classkey存放相同的队列 7 IPQueueAssignmentPolicy URL ClassKey获得策略,这个策略是通过IP来获得URL的class key 8 QueueAssignmentPolicy URL ClassKey获得策略，该类是抽象类,不同的策略由不同的子类实现，如根据域名、IP等，用户可以自己扩展 9 RecoveryJournal 管理着/logs/recover.gz，该文件记录所有的URL抓取 情况，如抓取成功、失败都有不同的对应格式。该文件主要用于下次Heritrix恢复，如Heritrix异常中断重新启动Heritrix的话又会重新 抓取，而如果基于该文件启动的话则会避免这个问题，同时对于上次异常中断而来不及抓取的URL都会优先抓取 10 RecyclingSerialBinding 给每个线程分配的数据输出流管理器,里面用ThreadLocal来管理每个线程的数据输出流，如此可以节省大量重复序列化 11 WorkQueue 代表着一个队列,抽象类,会有不同的子类实现，如由BDB存储数据的BdbWorkQueue,Heritrix最复杂的地方之一，接下来会重点分析 12 WorkQueueFrontier 队列调度器,管理着所有的队列，里面用不同的类型管理着不同的队列，如不在活动状态队列：Queue inactiveQueues.可以说是Heritrix中最为复杂最为关键的类,接下来会重重点分析 1.org.archive.crawler 序号 类 说明 1 CommandLineParser Heritrix也可以通过CMD命令进行操作,该类用于解析CMD命令 2 Heritrix Heritrix主类,可以通过该类启动Heritrix 3 SimpleHttpServer Heritrix Web服务器,可以通过Web管理Heritrix 4 WebappLifecycle 封装Servlet,如此才可以通过Web启动Heritrix,里面装载Heritrix对象 2.org.archive.crawler.admin 序号 类 说明 1 CrawlJob Heritrix的核心类,代表着一个抓取任务,order.xml中大部分属性都围绕其配置,以后会着重说明 2 CrawlJobErrorHandler 维护者一个抓取任务(CrawlJob)的错误日志,UI中显示的JOB错误就来自于它 3 CrawlJobHandler 抓取任务处理器,Heritrix可以有多个抓取任务,都由它进行管理 4 InvalidJobFileException 抓取任务文件异常,意义不大 5 SeedRecord 记录种子的处理记录,如该种子重定向到哪个URL,在seeds.txt里面会有说明，该重定向值就来源于它 6 StatisticsSummary 统计摘要类，所用不多 7 StatisticsTracker Heritrix核心类，统计跟踪器,贯穿整个Heritrix的运行,如统计抓取了多少URL，以后会着重说明 3.org.archive.crawler.admin.ui 序号 类 说明 1 CookieUtils Cookie工具类,主要用于访问Cookie 2 JobConfigureUtils CrawlJob配置管理工具类,当你通过Web Ui去配置一个CrawlJob时就会用到这个类 3 RootFilter 不熟 4.org.archive.crawler.datamodel 序号 类 说明 1 CandidateURI Heritrix的核心类,代表着一个URL,贯穿整个抓取,与CrawlURI的区别是它还没有通过调度器(Frontier)，只有通过了调度器的URL才可能去获取网页内容区下载等，以后会着重说明 2 CandidateURITest CandidateURI的测试类,比如可以用它获知如何创建CanditeURI 3 Checkpoint Heritrix会定期备份它的数据,如日志、正在获取的URL内容，都是在底层定时运行,当Heritrix异常中断可以通过它来恢复.也类似于各个数据库的Ckeckpoint 4 CoreAttributeConstants 装载着Heritrix的基本属性变量名,一般是对应order.xml中的标签名 5 CrawlHost Heiritrix的核心类,代表着一个Host，里面主要包含域名、IP。由于Heritrix可以控制抓取速度，如对一个Host的抓取速度,这个类就代表着那个Host.以后会着重说明 6 CrawlOrder Heritrix的核心类,基本上对应着order.xml的各个属性值,除了各个组件的详细属性，以后会着重说明 7 CrawlServer Heritrix的核心类,也对应着一个Host,里面装载着一个Host的各种Heritrix数据,如统计信息、爬虫协议 8 CrawlSubstats 抓取统计类,主要统计抓取Url的个数、成功的个数、下载的字节数等等 9 CrawlURI CandidateURI的子类,主要比CaidiateURI多了网页内容指纹、所属队列、组件处理器等 10 CredentialStore 凭证存储类，负责存储各种凭证,如登陆 11 FetchStatusCodes 抓取状态,有不同的属性代表不同的抓取状态,如DNS获取成功：S_DNS_SUCCESS 12 RobotsHonoringPolicy 爬虫协议,代表着不同的抓取策略 13 Robotstxt 爬虫协议,用于解析robots.txt 14 ServerCache 服务器缓存,主要缓存CrawlHost和CrawlServer 15 UriUniqFilter 接口,用于过滤已经抓取过的URL 5.org.archive.crawler.datamodel.credential 序号 类 说明 1 Credential 凭证类,代表着一个凭证,从order.xml配置文件中获取数据 2 CredentialAvatar 代表着一个具体的凭证 3 HtmlFormCredential Credential的子类,代表着提交HTML FORM表单时所需要的凭证 4 Rfc2617Credential Credential的子类,代表着RFC2617 HTTP 认证凭证 6.org.archive.crawler.deciderules 序号 类 说明 1 AcceptDecideRule URL规则,表示接受 2 ConfiguredDecideRule URL规则，通过order.xml文件中的配置来决定是否拒绝(REJECT)或接受(ACCEPT) 3 DecideRule URL规则的父类,审核一个URL是否接受(ACCEPT)、拒绝(REJECT)或放弃(PASS),通过decisionFor(Object object)方法,该方法由其子类实现 4 DecidingScope 验证一个URL是否在范围来决定是否接受、拒绝或放弃 5 MatchesRegExpDecideRule 通过配置的正则表达式来决定URL是否可接受、拒绝或放弃 6 NotMatchesRegExpDecideRule MatchesRegExpDecideRule的子类,如果URL不匹配该正则则接受 7 PathologicalPathDecideRule 如果URL中相同目录名超过配置文件中的个数,则拒绝,如http://www.xxx.com/a/a/a/a/a其中a的个数超过一定限制则拒绝 8 PrerequisiteAcceptDecideRule 如果URL中有先决条件URL则接受,也就是该CandidateURI里的pathFromSeed属性里含有P,表示运行该URL之前有先要运行的URL 9 RejectDecideRule URL规则，表示拒绝 10 TooManyHopsDecideRule 如果超过配置文件中的约点数(max-hops),则拒绝 7.org.archive.crawler.event 序号 类 说明 1 CrawlStatusListener 爬虫监听器,如监听爬虫是否在运行，是否暂停等 2 CrawlURIDispositionListener URL监听器,如监听URL是否失败，是要要重新抓取等 8.org.archive.crawler.extractor 序号 类 说明 1 Extractor 所有抽取类的父类,用于从一个URL中抽取出新的URL 2 ExtractorCSS 从CSS中抽取出新的URL 3 ExtractorDOC 从DOC中抽取出新的URL 4 ExtractorHTML 从HTML中抽取出新的URL,Heritrix核心类 5 ExtractorHTTP 从HTTP中抽取出新的URL 6 ExtractorJS 从Javascript中抽取出新的URL 7 ExtractorPDF 从PDF中抽取出新的URL 8 ExtractorSWF 从SWF中抽取出新的URL 9 ExtractorXML 从XML中抽取出新的URL 10 HTTPContentDigest 网页内容文摘,实际上是通过MD5或SHA1算法将网页内容指纹化 11 Link 链接,代表抽取出来的URL]]></content>
      <categories>
        <category>java爬虫</category>
      </categories>
      <tags>
        <tag>heritrix</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu设置与修改用户密码重置 (]]></title>
    <url>%2F2014%2F12%2F12%2FUbuntu%E8%AE%BE%E7%BD%AE%E4%B8%8E%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E9%87%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[设置ROOT密码方法：sudo passwd root ，然后输入密码即可！ // 此方法仅针对root密码尚未设置的情况下 修改root密码的方法：sudo passwd root 进入root状态.命令: su root 然后输入你设置好的密码就OK了 修改普通用户密码方法：passwd username 开机到grub时，用上下键移到第二行的恢复模式，按e（注意不是回车）即Ubuntu，With Linux 3.2.0-23-generic（recovery mode）2、把ro recovery nomodeset 改成rw single init=/bin/bash然后按ctrl+x 或者F10 就可以进入 单用户模式 这样，就可以启动linux的单用户模式，有点类似windows的安全模式，就是只启动最基本的系统，网络服务、系统服务等都不启动。单用户模式引导完成以后，会有#提示符，表示已拥有超级用户权限，然后请在#后执行命令：/usr/bin/passwd系 统应该会提示输入口令，这个口令是不回显的，保证输入无误就可以了，回车后，系统会要求再输入一遍，输入要求一致，然后会看到口令修改成功的提示。再键入 命令 init 3键入系统的字符界面模式下（系统会重新改变运行级别），看到login:提示，再重新试一试是否可以用root和刚刚修改过的口令登录。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[纯js接收url中的get]]></title>
    <url>%2F2014%2F12%2F07%2F%E7%BA%AFjs%E6%8E%A5%E6%94%B6url%E4%B8%AD%E7%9A%84get%2F</url>
    <content type="text"><![CDATA[12345678910111213window.onload = function ()&#123; var url = location.search; //获取url中？符后的字串 var theRequest = new Object(); if (url.indexOf("?") != -1) &#123; var str = url.substr(1); strs = str.split("&amp;"); for(var i = 0; i &lt; strs.length; i ++) &#123; theRequest[strs[i].split("=")[0]]=(strs[i].split("=")[1]); &#125; &#125; alert(theRequest['f']); return theRequest;&#125;]]></content>
      <categories>
        <category>js</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[php中ckeditor的配置方法]]></title>
    <url>%2F2014%2F11%2F29%2Fphp%E4%B8%ADckeditor%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[phpupload服务器flashfunctionjavascriptckeditor 编辑器php正确配置方法 下载安装 CKEditor: http://ckeditor.com/ 解压下载到的CKEditor放到网站的路径中即可 下载安装 CKFinder: http://ckfinder.com/download 解压下载到的CKFinder放到与CKEditor同一目录中即可 在网页中使用 CKEditor 和 CKFinder: CKEditor 实际是替换一个 textarea 标签，所以把textarea放到一个form中，当提交到php服务器端，使用$_GET[‘xxx’] 或者 $_POST[‘xxx’] 取得编辑好的数据。注意，因为 CKEditor 要替换 textarea，所以相应的javascript 代码”CKEDITOR.replace(xxxxxx)” 要放在 textarea 的后面。 最简单的方法，直接新建一个test.html文件（和ckeditor、ckfinder处于同一级目录）使用下面的例子修改一下即可。在浏览器里浏览test.html就可以在网页中看到 CKEditor 了，兴奋吧。 CKEditor Demo submit // 启用 CKEitor 的上传功能，使用了 CKFinder 插件 CKEDITOR.replace( ‘editor1’, { filebrowserBrowseUrl : ‘ckfinder/ckfinder.html’, filebrowserImageBrowseUrl : ‘ckfinder/ckfinder.html?Type=Images’, filebrowserFlashBrowseUrl : ‘ckfinder/ckfinder.html?Type=Flash’, filebrowserUploadUrl : ‘ckfinder/core/connector/php/connector.php?command=QuickUpload&amp;type=Files’, filebrowserImageUploadUrl : ‘ckfinder/core/connector/php/connector.php?command=QuickUpload&amp;type=Images’, filebrowserFlashUploadUrl : ‘ckfinder/core/connector/php/connector.php?command=QuickUpload&amp;type=Flash’ }); 配置CKFinder进行上传图片，Flash等。 到这里，点击 “Image” 按钮，在弹出的窗口中的 “Upload” 标签中已经看到上传按钮了，但是在上传文件时失败。因为CKFinder还没有配置好。需要创建上传文件的目录和修改 ckfinder/config.php 里的三个地方: a. 创建保存上传文件的目录，如upload （把upload文件夹也放在和ckeditor、ckfinder处于同一级目录，三个目录都位于项目目录下） 其路径为 /upload/ [For Linux: 把其权限设置为php server可读写，最简单的是 chmod 777 upload 这样php server才有权限往里面保存文件.] b. 找到配置文件（ckfinder/config.php）第32行，把 function CheckAuthentication() { return false; } 修改成 function CheckAuthentication() { return true; } c. 找到第63行，把 $baseUrl 的值改成保存上传文件存目录的URL， 如 $baseUrl = ‘/项目名/upload/‘;（这里的地址要从项目目录开始的绝对路径，确定上传目录已经存在） d. 找到第82行，删除 $baseDir = resolveUrl($baseUrl); 修改 $baseDir 为上传文件目录的绝对路径，（不能删除，否则不能上传）（本地测试的时候要从磁盘的跟目录下开始，即C:/或者D:/的直接目录） 如$baseDir = ‘/Apache2/htdocs/ck/upload/‘; （Apache2是D:/盘下的直接目录） 这是因为resolveUrl($baseUrl)函数不能正常工作。 至此，可以使用 CKEditor 和 CKFinder 上传文件了。 对上面这个小例子中服务器端的b.php代码：]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>ckeditor</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[dede标签大全]]></title>
    <url>%2F2014%2F11%2F21%2Fdede%E6%A0%87%E7%AD%BE%E5%A4%A7%E5%85%A8%2F</url>
    <content type="text"><![CDATA[dede标签大全 {dede:global.cfg_webname/} 站点名称{dede:global.cfg_basehost/} 站点url(后台设置){dede:global.cfg_cmsurl/} 站点实际url(奇奇推荐){dede:global.cfg_memberurl/} 会员中心地址{dede:global.cfg_dataurl/} 站点data目录地址{dede:global.cfg_templeturl/} 模板目录地址{dede:global.cfg_powerby/} 底部版权{dede:global.cfg_beian/} 备案信息{dede:field.description function=’html2text(@me)’/} 站点描述{dede:field.phpurl/} 站点plus目录站点地址{dede:field.title/} 标题{dede:field.keywords/} 关键字{dede:flink row=’24’/}友情链接{dede:field.content/} 栏目内容{dede:field.position/} 当前位置{dede:field.pubdate function=”MyDate(‘Y-m-d H:i’,@me)”/} 时间{dede:field.source/} 来源{dede:field.writer/} 作者 {dede:field.body/} 文章内容{dede:adminname/} 责任编辑{dede:pagebreak/} 页码{dede:prenext get=’pre’/} 上一篇{dede:prenext get=’next’/} 下一篇导航 {dede:channel type=’self’currentstyle=”~typename~”} [field:typename/]{/dede:channel}{dede:include filename=”*.htm”/} 调用模板文件{dede:memberinfos}头像[field:uname/]用户名查看详细资料发送留言加为好友用户等级:[field:rankname /]注册时间:[field:jointimefunction=”MyDate(‘Y-m-d H:m’,@me)”/]最后登录:[field:logintimefunction=”MyDate(‘Y-m-d H:m’,@me)”/]{/dede:memberinfos}收藏挑错推荐打印文档列表{dede:arclist titlelen=42 row=10} [field:title/] \[field:descriptionfunction=&apos;cn_substr(@me,80)&apos;/\]... {/dede:arclist}—————————- 标签名称：arclist标记简介：织梦常用标记，也称为自由列表标记，其中imglist、imginfolist、specart、coolart、autolist都是由该标记所定义的不同属性延伸出来的别名标记。功能说明：获取指定文档列表适用范围：全局使用基本语法：{dede:arclist flag=’h’ typeid=’’ row=’’ col=’’ titlelen=’’infolen=’’ imgwidth=’’ imgheight=’’ listtype=’’ orderby=’’keyword=’’ limit=’0,1’}[field:title/]{/dede:arclist}typeid=’’栏目ID,在列表模板和档案模板中一般不需要指定，在首页模板中允许用”,”分开表示多个栏目； orderby=’sortrank’ 文档排序方式§ orderby=’hot’ 或 orderby=’click’ 表示按点击数排列§ orderby=’sortrank’ 或 orderby=’pubdate’ 按出版时间排列§ orderby=’near’§ orderby==’lastpost’ 按最后评论时间§ orderby==’scores’ 按得分排序§ orderby=’id’ 按文章ID排序§ orderby=’rand’ 随机获得指定条件的文档列表 idlist =’’ 提取特定文档（文档ID） 调用指定id文档例子idlist =’4,45,78,237’limit=’起始ID,记录数’ （起始ID从0开始）表示限定的记录范围（如：limit=’1,2’表示从ID为1的记录开始，取2条记录）keyword=’’ 含有指定关键字的文档列表，多个关键字用”,”分orderway=’desc’ 值为 desc 或 asc ，指定排序方式是降序还是顺向排序，默认为降序使用实例调用推荐文章 {dede:arclist flag=”c” channelid=’’ row=’10’ titlelen=’60’orderby=’’} [field:title/] {/dede:arclist} row=&apos;10&apos; 调用10条, titlelen=&apos;60&apos;标题长度为30汉字 flag=&quot;c&quot; 推荐文章 orderby=&apos;&apos;默认为按发布时间排序 flag = ‘c’ 自定义属性值：头条[h] 推荐[c] 图片[p] 幻灯[f] 滚动[s] 跳转[j] 图文[a]加粗[b]调用最新文章按发布时间排序 {dede:arclist channelid=’’ row=’10’ titlelen=’60’} [field:title/] {/dede:arclist} row=&apos;10&apos; 调用10条,titlelen=&apos;60&apos;标题长度为30汉字 按ID排序降序排列,从大到小{dede:arclist channelid=’’ row=’10’ titlelen=’60’orderby=’id’ } [field:title/] {/dede:arclist} row=&apos;10&apos; 调用10条, titlelen=&apos;60&apos;标题长度为30汉字 orderby=&apos;id&apos; 按ID,降序排列按ID排序顺序排列,从小到大{dede:arclist channelid=&apos;&apos; row=&apos;10&apos; titlelen=&apos;60&apos;orderby=&apos;id&apos;orderway=&apos;asc&apos; } [field:title/] {/dede:arclist} row=&apos;10&apos; 调用10条, titlelen=&apos;60&apos;标题长度为30汉字 orderby=&apos;id&apos;按ID,orderway=&apos;desc&apos; 值为 desc 或 asc ，指定排序方式是降序还是顺向排序，默认为降序调用含有缩图的文档{dede:arclist flag=&quot;p&quot; row=&apos;10&apos;titlelen=&apos;60&apos;} \[field:title/\] {/dede:arclist} flag = &apos;p&apos;自定义属性值：头条\[h\] 推荐\[c\] 图片\[p\] 幻灯\[f\] 滚动\[s\] 跳转\[j\] 图文\[a\] 加粗\[b\]日期的各种格式08 \[field:pubdate function=strftime(&apos;%d&apos;,@me)/\] 08日 [field:pubdate function=strftime(‘%d日’,@me)/]06-08 [field:pubdate function=strftime(‘%m-%d’,@me)/]06月08日 [field:pubdate function=strftime(‘%m月%d日’,@me)/]09-06-08 [field:pubdate function=strftime(‘%y-%m-%d’,@me)/]2009-06-08 [field:pubdate function=strftime(‘%Y-%m-%d’,@me)/]09年06月08日 [field:pubdate function=strftime(‘%y年%m月%d日’,@me)/]2009年06月08日 [field:pubdate function=strftime(‘%Y年%m月%d日’,@me)/] 2009-06-08 13:28 [field:pubdate function=strftime(‘%Y-%m-%d %H:%M’,@me)/] 调用缩略图： 实现“文章标题-2级栏目-1级栏目-网站名”形式搜索表单调用标签： 智能模糊搜索 按时间点击文章排行榜调用标签：COPY页面内容，自动在后面加上网站信息，利于SEO列表隔5行加一行线：搜索文章调用标签：{dede:globalname=’keyword’/}”的搜索结果 - {dede:globalname=’cfg_webname’/} 搜索” {dede:globalname=’keyword’/}”的结果调用外部htm文件：{dede:include file=’head.htm’ismake=’yes’/}栏目介绍：{dede:field name=’description’function=’html2text(@me)’/}调用文章tags标记： {dede:tag type=’current’/}控制字数描述标记： [field:descriptionfunction=”cn_substr(@me,100)”/]…调用文字链接标记： [field:title/]相关文档调用标签： {dede:Pkeart titlelen=’24’ row=’10’} [field:title/] {/dede:Pkeart}热点文档调用标签： {dede:arcPst orderby=’cPck’titlelen=’40’ row=’10’} [field:title/] {/dede:arcPst}随机推荐调用标签： {dede:arcPst type=’commend’titlelen=’26’ orderby=’rand’ row=’10’} [field:title/] {/dede:arcPst}推荐文档调用标签： {dede:arcPst type=’commend’titlelen=’40’ row=’10’} [field:title/] {/dede:arcPst}最新图文调用标签： {dede:arcPst row=4 titlelen=20orderby=pubdate type=’image.’ imgwidth=’152’ imgheight=’98’} [field:title/] {/dede:arcPst}最新文 章调用标签： {dede:arcPst row=8 titlelen=24orderby=pubdate}[field:textPnk/] {/dede:arcPst}上一篇下一篇标签: {dede:prenext get=’pre’/}{dede:prenextget=’next’/}文章顶客次数标签： {dede:field name=’digg’/}顶一下文 章分页调用标签： {dede:pagebreak/}文章内容调用标签： {dede:field name=’body’/}文章点击调用标签：[field:typename/] {/dede:channel}指定调用栏目标签： {dede:onetypetypeid=’ID’}[field:typename /]{/dede:onetype}栏目导航调用标签： 首页 {dede:channel type=’top’row=’8’ currentstyle=”~typename~ “}[field:typename/] {/dede:channel}网站标题调用标签： {dede:global name=’cfg_webname’/}模板路径调用标签： {dede:field name=’templeturl’/}调用图片链接标记： 热关键字调用标签： {dede:hotwords num=’5’subday=’30’/}头条推荐调用标签： {dede:arcPst row=1 titlelen=24orderby=pubdate att=2} [field:textPnk/] {dede:php}echo &apos;totalresult=&apos;.$\_GET\[&apos;totalresdult&apos;\].&apos;&amp;pageno=&apos;.$\_GET\[&apos;pagedno&apos;\];{/dede:php}]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>dedecms</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux 时间sh 的熟练运用]]></title>
    <url>%2F2014%2F11%2F14%2Flinux-%E6%97%B6%E9%97%B4sh-%E7%9A%84%E7%86%9F%E7%BB%83%E8%BF%90%E7%94%A8%2F</url>
    <content type="text"><![CDATA[在linux环境中，不管是编程还是其他维护，时间是必不可少的，也经常会用到时间的运算，熟练运用date命令来表示自己想要表示的时间，肯定可以给自己的工作带来诸多方便。 1．命令格式： date [参数]… [+格式] 2．命令功能： date 可以用来显示或设定系统的日期与时间。 3．命令参数： 必要参数: %H 小时(以00-23来表示)。 %I 小时(以01-12来表示)。 %K 小时(以0-23来表示)。 %l 小时(以0-12来表示)。 %M 分钟(以00-59来表示)。 %P AM或PM。 %r 时间(含时分秒，小时以12小时AM/PM来表示)。 %s 总秒数。起算时间为1970-01-01 00:00:00 UTC。 %S 秒(以本地的惯用法来表示)。 %T 时间(含时分秒，小时以24小时制来表示)。 %X 时间(以本地的惯用法来表示)。 %Z 市区。 %a 星期的缩写。 %A 星期的完整名称。 %b 月份英文名的缩写。 %B 月份的完整英文名称。 %c 日期与时间。只输入date指令也会显示同样的结果。 %d 日期(以01-31来表示)。 %D 日期(含年月日)。 %j 该年中的第几天。 %m 月份(以01-12来表示)。 %U 该年中的周数。 %w 该周的天数，0代表周日，1代表周一，异词类推。 %x 日期(以本地的惯用法来表示)。 %y 年份(以00-99来表示)。 %Y 年份(以四位数来表示)。 %n 在显示时，插入新的一行。 %t 在显示时，插入tab。 MM 月份(必要) DD 日期(必要) hh 小时(必要) mm 分钟(必要) ss 秒(选择性) 选择参数: -d&lt;字符串&gt; 显示字符串所指的日期与时间。字符串前后必须加上双引号。 -s&lt;字符串&gt; 根据字符串来设置日期与时间。字符串前后必须加上双引号。 -u 显示GMT。 –help 在线帮助。 –version 显示版本信息 4．使用说明： 1.在显示方面，使用者可以设定欲显示的格式，格式设定为一个加号后接数个标记，其中可用的标记列表如下: % : 打印出 %： %n : 下一行 %t : 跳格 %H : 小时(00..23) %I : 小时(01..12) %k : 小时(0..23) %l : 小时(1..12) %M : 分钟(00..59) %p : 显示本地 AM 或 PM %r : 直接显示时间 (12 小时制，格式为 hh:mm:ss [AP]M) %s : 从 1970 年 1 月 1 日 00:00:00 UTC 到目前为止的秒数 %S : 秒(00..61) %T : 直接显示时间 (24 小时制) %X : 相当于 %H:%M:%S %Z : 显示时区 %a : 星期几 (Sun..Sat) %A : 星期几 (Sunday..Saturday) %b : 月份 (Jan..Dec) %B : 月份 (January..December) %c : 直接显示日期与时间 %d : 日 (01..31) %D : 直接显示日期 (mm/dd/yy) %h : 同 %b %j : 一年中的第几天 (001..366) %m : 月份 (01..12) %U : 一年中的第几周 (00..53) (以 Sunday 为一周的第一天的情形) %w : 一周中的第几天 (0..6) %W : 一年中的第几周 (00..53) (以 Monday 为一周的第一天的情形) %x : 直接显示日期 (mm/dd/yy) %y : 年份的最后两位数字 (00.99) %Y : 完整年份 (0000..9999) 2.在设定时间方面： date -s //设置当前时间，只有root权限才能设置，其他只能查看。 date -s 20080523 //设置成20080523，这样会把具体时间设置成空00:00:00 date -s 01:01:01 //设置具体时间，不会对日期做更改 date -s “01:01:01 2008-05-23″ //这样可以设置全部时间 date -s “01:01:01 20080523″ //这样可以设置全部时间 date -s “2008-05-23 01:01:01″ //这样可以设置全部时间 date -s “20080523 01:01:01″ //这样可以设置全部时间 3.加减： date +%Y%m%d //显示前天年月日 date +%Y%m%d –date=”+1 day” //显示前一天的日期 date +%Y%m%d –date=”-1 day” //显示后一天的日期 date +%Y%m%d –date=”-1 month” //显示上一月的日期 date +%Y%m%d –date=”+1 month” //显示下一月的日期 date +%Y%m%d –date=”-1 year” //显示前一年的日期 date +%Y%m%d –date=”+1 year” //显示下一年的日期 5．使用实例： 实例1：显示当前时间 命令： date date ‘+%c’ date ‘+%D’ date ‘+%x’ date ‘+%T’ date ‘+%X’ 输出： [root@localhost ~]# date 2012年 12月 08日 星期六 08:31:35 CST [root@localhost ~]# date ‘+%c’ 2012年12月08日 星期六 08时34分44秒 [root@localhost ~]# date ‘+%D’ 12/08/12[root@localhost ~]# date ‘+%x’ 2012年12月08日 [root@localhost ~]# date ‘+%T’ 08:35:36[root@localhost ~]# date ‘+%X’ 08时35分54秒 [root@localhost ~]# 说明： 实例2：显示日期和设定时间 命令： date –date 08:42:00 输出： [root@localhost ~]# date ‘+%c’ 2012年12月08日 星期六 08时41分37秒 [root@localhost ~]# date –date 08:42:00 2012年 12月 08日 星期六 08:42:00 CST [root@localhost ~]# date ‘+%c’ –date 08:45:00 2012年12月08日 星期六 08时45分00秒 [root@localhost ~]# 说明： 实例3：date -d参数使用 命令： 输出： [root@localhost ~]# date -d “nov 22” 2012年 11月 22日 星期四 00:00:00 CST [root@localhost ~]# date -d ‘2 weeks’ 2012年 12月 22日 星期六 08:50:21 CST [root@localhost ~]# date -d ‘next monday’ 2012年 12月 10日 星期一 00:00:00 CST [root@localhost ~]# date -d next-day +%Y%m%d 20121209[root@localhost ~]# date -d tomorrow +%Y%m%d 20121209[root@localhost ~]# date -d last-day +%Y%m%d 20121207[root@localhost ~]# date -d yesterday +%Y%m%d 20121207[root@localhost ~]# date -d last-month +%Y%m 201211[root@localhost ~]# date -d next-month +%Y%m 201301[root@localhost ~]# date -d ‘30 days ago’ 2012年 11月 08日 星期四 08:51:37 CST [root@localhost ~]# date -d ‘-100 days’ 2012年 08月 30日 星期四 08:52:03 CST [root@localhost ~]# date -d ‘dec 14 -2 weeks’ 2012年 11月 30日 星期五 00:00:00 CST [root@localhost ~]# date -d ‘50 days’ 2013年 01月 27日 星期日 08:52:27 CST 说明： date 命 令的另一个扩展是 -d 选项，该选项非常有用。使用这个功能强大的选项，通过将日期作为引号括起来的参数提供，您可以快速地查明一个特定的日期。 -d 选项还可以告诉您，相对于当前日期若干天的究竟是哪一天，从现在开始的若干天或若干星期以后，或者以前（过去）。通过将这个相对偏移使用引号括起 来，作为 -d 选项的参数，就可以完成这项任务。 具体说明如下： date -d “nov 22” 今年的 11 月 22 日是星期三 date -d ‘2 weeks’ 2周后的日期 date -d ‘next monday’ (下周一的日期) date -d next-day +%Y%m%d（明天的日期）或者：date -d tomorrow +%Y%m%d date -d last-day +%Y%m%d(昨天的日期) 或者：date -d yesterday +%Y%m%d date -d last-month +%Y%m(上个月是几月) date -d next-month +%Y%m(下个月是几月) 使用 ago 指令，您可以得到过去的日期： date -d ‘30 days ago’ （30天前的日期） 使用负数以得到相反的日期： date -d ‘dec 14 -2 weeks’ （相对:dec 14这个日期的两周前的日期） date -d ‘-100 days’ (100天以前的日期) date -d ‘50 days’(50天后的日期) 实例4：显示月份和日数 命令： date ‘+%B %d’ 输出： [root@localhost ~]# date ‘+%B %d’ 十二月 08[root@localhost ~]# 说明： 实例5：显示时间后跳行，再显示目前日期 命令： date ‘+%T%n%D’ -f 存在且是普通文件-d 存在且是目录-s 存在且字节数大于0-r 存在且可读-w 存在且可写-x 存在且可执行如：test -d “mydoc” 判断mydoc是否是目录cp /etc/my.conf &gt;/dev/null 2&gt;&amp;1p/dev/null 空设备n此句命令的结果是：1.cp命令没有目标文件,应该输出错误。2.2&gt;&amp;1表示错误重定向指向标准输出。3.&gt;/dev/null又使标准输出重定向到空，就是不要输出信息p即：一个错误的命令执行，什么功能都不实现，且没有任何信息或错误提示输出。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Multiple markers at this line @Override的解决方法]]></title>
    <url>%2F2014%2F10%2F12%2FMultiple-markers-at-this-line-Override%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Multiple markers at this line implements android.view.View.OnClickListener.onClick The method onClick(View) of type new View.OnClickListener(){} mustoverride a superclass method 原因：JDK1.5不支持这种写法。实现接口方法需要重写抽象方法。解决方法：Eclipse的Window-Preferences-&gt;Java-&gt;Compiler，把Compiler compliance level从1.5改成1.6就可以了 补充 3: Eclipse出现android Multiple markers at this line 错误:这是由于JDK1.5的缘故,只需要将Compiler compliance level修改为1.6即可.此处可能需要在两个地方修改 (1) Eclipse的Window-Preferences-&gt;Java-&gt;Compiler(2)Eclipse的Project-&gt;Properties-&gt;Java Compiler]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java+Eclipse环境的配置]]></title>
    <url>%2F2014%2F10%2F10%2FJava-Eclipse%E7%8E%AF%E5%A2%83%E7%9A%84%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[第一步：Java+Eclipse环境的配置 首先上官网下个JDK和Eclipse（最好下载最新的版本）。 下载JDK1.6，官方下载地址:http://www.java.net/download/jdk6/6u10/promoted/b32/binaries/jdk-6u10-rc2-bin-b32-windows-i586-p-12_sep_2008.exe 下载Eclipse，到eclipse官方网站http://www.eclipse.org/downloads/下载，我下载的是Eclipse IDE for Java EE Developers,Windows 32 Bit 配置过程： 一、JDK安装 JDK安装过程非常的简单，直接运行程序，选择路径安装就行，我的安装路径是在D:\Java\jdk1.6.0_10 二、配置环境变量。 总共配置3个环境变量JAVA_HOME CLASS_PATH PATH 1.JAVA_HOME 右击“我的电脑”，选择“属性”，点击“高级系统设置&quot;选项卡，然后就可以新建环境变量了。（我选的是在系统变量下设置，与用户变量的区别是在系统变量下设置的不同的用户登录都可以使用，而用户变量只是在该用户下使用有效。） 点击新建环境变量 变量名为JAVA_HOME,变量值为JDK安装目录，我的为D:\Java\jdk1.6.0_10 2 .CLASS_PATH 新建环境变量 CLASS_PATH 变量值为 .;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar 一定要注意是 .;表示当前路径下。 3.PATH 不用新建，找到PATH添加路径;%JAVA_HOME%\jre\bin;%JAVA_HOME%\bin 按照以上步骤就配置完成了。 三、最后你可以在cmd下运行java和javac 以及java -version命令测试安装是否成功，如果出现有java的相关信息的话就正确了。 然后你就可以在Eclipse下新建工程，编写一个java程序（HelloWorld），测试环境的准确性。我相信如果是安装上面的安装的话，应该没有什么问题。 补充说明： path 可以使得系统在任何路径下识别java命令，CLASS_PATH使得java在加载类的路径，只有在CLASS_PATH路径下才能被加载。 cmd下设置环境变量的方法 在“开始→运行”框中输入“cmd”后按“确定”按钮，出现命令运行窗口。在命令提示符下输入“set”即可查看环境变量设置。要查看具体某个环境变量的设置，比如要查看path环境变量的设置，可以输入“set path”。要创建一个环境变量，比如要创建一个名为aa的，值为“c:”的环境变量，可以输入“set aa=c:”命令。而要删除一个环境变量，比如要删除aa环境变量，则可输入“set aa=”命令（注意=后面不能有空格）。如何更改一个环境变量的设置呢？更改环境变量有两种情况：一是追加方式，即在不改变环境变量现有设置的情况下，增加变量的值，比如要给环境变量aa增加一个值为“D:”的设置，可以输入“set aa=%path%;D:”。另一种是完全修改方式，对于这种方式，我们可以采用直接创建一个环境变量的方法来实现。 第二步：Heritrix在Eclipse中的搭建原文：http://liuli3163.iteye.com/blog/890136 １、在官方网站http://sourceforge.net/projects/archive-crawler/files/archive-crawler (heritrix 1.x)/1.14.3/ ，下载heritrix-1.14.3-src.zip和heritrix-1.14.3.zip两个压缩包，并解压，以后分别简称SRC包和ZIP包； ２、在Eclipse下新建Java项目，取名Heritrix；(如我打开 Eclipse的工作区在D:\eclipse\workplace下,当我建了项目Heritrix后,我就可以找到D:\eclipse \workplace\Heritrix文件夹.其中包含两个工程属性文件.classpath 和.project和两个文件夹src和bin，接着把bin文件夹删掉） ３、复制SRC包下面src/java文件夹下org、com、st三个文件夹到项目根目录下的src文件夹下(即D:\eclipse\workplace\Heritrix\src)； ４、复制SRC包下src下resources和conf文件夹到项目根目录(D:\eclipse\workplace\Heritrix)；５、复制SRC包下lib文件夹到项目根目录(即D:\eclipse\workplace\Heritrix)；６、复制ZIP包下webapps文件夹到项目根目录(D:\eclipse\workplace\Heritrix)； 做好了以上，在Eclipse中Heritrix项目右击刷新一下，就可以看到刚才所复制的包了。 ７、在Eclipse中修改项目conf下heritrix.properties文件 heritrix.version = @VERSION@ 改为heritrix.version = 1.14.3 heritrix.cmdline.admin = 改为 heritrix.cmdline.admin = admin:xxm (这里是用户名与密码,可任读者设定.) heritrix.cmdline.port = 改为 heritrix.cmdline.port = 8888 (注默认是8080的如果你已占用了这个端口号的话,要设另一个才行，由于8080端口已经被占用，我修改为8888） ８、在项目Heritrix上右键选择构建路径-&gt;配置构建路径-&gt;库选项卡-&gt;添加Jar，将lib目录下的所有.jar文件选中，点击完成！ 9.将conf文件夹下改好的heritrix.properties 文件复制一份到src文件夹（这一步不知道是不是必须的，我是在别人博客说这样好些） 10.设置eclipse，把 Windows-Preferences-Java-Complicer-Errors/Warnings 里面的Deprecated and restricted API中的Forbidden references(access rules)选为Warning。这是因为eclipse默认把这些受访问限制的API设成了ERROR，不做修改的话，后面会出现Access restriction: The type FileURLConnection is not accessible due to restriction on required library D:\java\lib\rt.jar错误信息 11.在Eclipse下启动Heritrix，找到项目src下的org.archive.crawler包下的主类Heritrix.java鼠标右键-&gt;运行。等成功看到heritrix版本信息后就说明你运行成功了。 12.将项目conf文件夹下的modules文件夹剪切到bin目录下，否则后面可能在配置抓取种子时，在Modules选项出现没有下拉框给你选。 13.重新启动Heritrix，打开浏览器，输入网址http://127.0.0.1:8888/，便可看到登陆界面，用上面设置好的账号密码登陆，便可开始你的Heritrix之旅。]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux sphinx的安装配置和中文分词包coreseek]]></title>
    <url>%2F2014%2F10%2F10%2Flinux-sphinx%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E5%92%8C%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D%E5%8C%85coreseek%2F</url>
    <content type="text"><![CDATA[转载至https://blog.csdn.net/ownfire/article/details/39316743 sphinx在此处下载： http://sphinxsearch.com/downloads/release/ 本次我下的是2.2.4版本 自持中文分词的包叫做coreseek，其实就是带了中文分词插件的sphinx，在此处下载： http://www.coreseek.cn/ 本次我下的是稳定版3.2.14 先写个结论，sphinx本身是可以支持中文搜索的，只是不支持中文分词，需要安装中文分词插件，coreseek就是一个打包了mmseg中文分词插件和sphinx源码的安装包 目前coreseek已经很久不更新了，稳定版3.2.14内带的的sphinx还是 0.9.9 release版本的；而sphinx可以通过设置为“一元切分模式”来支持搜索中文 在实际使用中，搜索非中文的话，sphinx比coreseek要快；搜索短中文字符串的话，开启了“一元切分模式”的sphinx比coreseek要快；只有在搜索长中文字串时，coreseek的分词优势才能显现，比sphinx要快 所以根据你的应用场景来选择用哪个，如果是索引英文、数字、字符较多的数据，就用源生sphinx；如果是索引中文非常多非常长的数据，还是用coreseek吧 下面先来讲sphinx的安装和配置： 把包下载下来，我下的是http://sphinxsearch.com/files/sphinx-2.2.4-release.tar.gz tar xzvf sphinx-2.2.4-release.tar.gz cd sphinx-2.2.4-release ./configure –prefix=/usr/local/sphinx/ –with-mysql –enable-id64 #如果是64位的才加这个选项 make make install 一开始以为libiconv的问题，又重装了几次还是一样，最后终于找着办法了编辑：./src/MakeFile文件将LIBS = -lm -lexpat -L/usr/local/lib改成LIBS = -lm -lexpat -liconv -L/usr/local/lib这样就装好了，现在来配置 cp /usr/local/sphinx/etc/sphinx-min.conf.dist /usr/local/sphinx/etc/test.conf vim /usr/local/sphinx/etc/test.conf sphinx配置文件结构介绍 Sphinx的配置文件结构如下： Source 源名称1{ #添加数据源，这里会设置一些连接数据库的参数比如数据库的IP、用户名、密码等 #设置sql_query、设置sql_query_pre、设置sql_query_range等后面会结合例子做详细介绍 …… } Index 索引名称1{ Source=源名称1 #设置全文索引 …… } Indexer{ #设置Indexer程序配置选项，如内存限制等 …… } Searchd{ #设置Searchd守护进程本身的一些参数 …… } Source和Index都可以配置多个。 spinx配置案例详细解释 接下来就来针对一个配置案例来做详细的配置介绍： #定义一个数据源 source search_main { #定义数据库类型 type = mysql #定义数据库的IP或者计算机名 sql_host = localhost #定义连接数据库的帐号 sql_user = root #定义链接数据库的密码 sql_pass = test123 #定义数据库名称 sql_db = test #定义连接数据库后取数据之前执行的SQL语句 sql_query_pre = SET NAMESutf8 sql_query_pre = SET SESSIONquery_cache_type=OFF #创建一个sph_counter用于增量索引 sql_query_pre = CREATETABLE IF NOT EXISTS sph_counter \ ( counter_id INTEGER PRIMARY KEY NOTNULL,max_doc_id INTEGER NOT NULL) #取数据之前将表的最大id记录到sph_counter表中 sql_query_pre = REPLACEINTO sph_counter SELECT 1, MAX(searchid) FROM v9_search #定义取数据的SQL，第一列ID列必须为唯一的正整数值 sql_query = SELECTsearchid,typeid,id,adddate,data FROM v9_search where \ searchid&lt;(SELECT max_doc_id FROM sph_counter WHERE counter_id=1 ) \ andsearchid&gt;=$start AND searchid&lt;=$end #sql_attr_uint和sql_attr_timestamp用于定义用于api过滤或者排序，写多行制定多列 sql_attr_uint = typeid sql_attr_uint = id sql_attr_timestamp = adddate #分区查询设置 sql_query_range = SELECTMIN(searchid),MAX(searchid) FROM v9_search #分区查询的步长 sql_range_step = 1000 #设置分区查询的时间间隔 sql_ranged_throttle = 0 #用于CLI的调试 sql_query_info = SELECT *FROM v9_search WHERE searchid=$id } #定义一个增量的源 source search_main_delta : search_main { sql_query_pre = set namesutf8 #增量源只查询上次主索引生成后新增加的数据 #如果新增加的searchid比主索引建立时的searchid还小那么会漏掉 sql_query = SELECTsearchid,typeid,id,adddate,data FROM v9_search where \ searchid&gt;(SELECT max_doc_id FROM sph_counter WHERE counter_id=1 ) \ andsearchid&gt;=$start AND searchid&lt;=$end sql_query_range = SELECTMIN(searchid),MAX(searchid) FROM v9_search where \ searchid&gt;(SELECT max_doc_id FROM sph_counter WHERE counter_id=1 ) } #定义一个index_search_main索引 index index_search_main { #设置索引的源 source = search_main #设置生成的索引存放路径 path =/usr/local/coreseek/var/data/index_search_main #定义文档信息的存储模式，extern表示文档信息和文档id分开存储 docinfo = extern #设置已缓存数据的内存锁定，为0表示不锁定 mlock = 0 #设置词形处理器列表，设置为none表示不使用任何词形处理器 morphology = none #定义最小索引词的长度 min_word_len = 1 #设置字符集编码类型，我这里采用的utf8编码和数据库的一致 charset_type = zh_cn.utf-8 #指定分词读取词典文件的位置 charset_dictpath =/usr/local/mmseg3/etc #不被搜索的词文件里表。 stopwords =/usr/local/coreseek/var/data/stopwords.txt #定义是否从输入全文数据中取出HTML标记 html_strip = 0 } #定义增量索引 index index_search_main_delta : index_search_main { source = search_main_delta path =/usr/local/coreseek/var/data/index_search_main_delta } #定义indexer配置选项 indexer { #定义生成索引过程使用索引的限制 mem_limit = 512M } #定义searchd守护进程的相关选项 searchd { #定义监听的IP和端口 #listen = 127.0.0.1 #listen =172.16.88.100:3312 listen = 3312 listen = /var/run/searchd.sock #定义log的位置 log =/usr/local/coreseek/var/log/searchd.log #定义查询log的位置 query_log =/usr/local/coreseek/var/log/query.log #定义网络客户端请求的读超时时间 read_timeout = 5 #定义子进程的最大数量 max_children = 300 #设置searchd进程pid文件名 pid_file =/usr/local/coreseek/var/log/searchd.pid #定义守护进程在内存中为每个索引所保持并返回给客户端的匹配数目的最大值 max_matches = 100000 #启用无缝seamless轮转，防止searchd轮转在需要预取大量数据的索引时停止响应 #也就是说在任何时刻查询都可用，或者使用旧索引，或者使用新索引 seamless_rotate = 1 #配置在启动时强制重新打开所有索引文件 preopen_indexes = 1 #设置索引轮转成功以后删除以.old为扩展名的索引拷贝 unlink_old = 1 # MVA更新池大小，这个参数不太明白 mva_updates_pool = 1M #最大允许的包大小 max_packet_size = 32M #最大允许的过滤器数 max_filters = 256 #每个过滤器最大允许的值的个数 max_filter_values = 4096 } 综合上面的资料，我对test.conf作了如下配置： source message1{ type = mysql sql_host = 127.0.0.1 sql_user = root sql_pass = 123456 sql_db = yh_comment sql_port = 3308 # optional, default is 3306 sql_query_pre = SET NAMES utf8 sql_query = \ SELECT id,bid,uid,content,valid,createtime \ FROM tbl_cmt00 \ UNION SELECT id,bid,uid,content,valid,createtime \ FROM tbl_cmt01 \ UNION SELECT id,bid,uid,content,valid,createtime \ FROM tbl_cmt02 \ UNION SELECT id,bid,uid,content,valid,createtime \ FROM tbl_cmt03 sql_field_string = bid sql_attr_uint = uid sql_field_string = content sql_attr_string = valid sql_field_string = createtime } index message1{ source = message1 path = /usr/local/sphinx/var/data/message1 ngram_len = 1 #表示使用一元字符切分模式，从而得以对单个中文字符进行索引 ngram_chars = U+3000..U+2FA1F, U+FF41..U+FF5A-&gt;a..z, U+FF21..U+FF3A-&gt;a..z, A..Z-&gt;a..z, a..z #表示要进行一元字符切分模式的字符集} indexer{ mem_limit = 128M} searchd{ listen = 9412 log = /usr/local/sphinx/var/log/searchd-message1.log query_log = /usr/local/sphinx/var/log/query-message1.log read_timeout = 5 max_children = 30 pid_file = /usr/local/sphinx/var/log/searchd-message1.pid #max_matches = 1000 seamless_rotate = 1 preopen_indexes = 1 unlink_old = 1 workers = threads # for RT to work binlog_path = /usr/local/sphinx/var/data } 上面的配置是已经开启“一元切分模式” 他的端口是3308，我的是3306 这样配置就完成了，接下来要生成索引和开启守护进程： /usr/local/sphinx/bin/indexer -c /usr/local/sphinx/etc/test.conf –all /usr/local/sphinx/bin/searchd -c /usr/local/sphinx/etc/test.conf 如果在建立索引的过程中出现”No fields in schema”的错误，原因是：sphinx对于sql数据源需要至少一个sql_field_string，当没有指定sql_field_string时会将数据源中没有明确指定为sql_attr_string的字符串字段用来做sql_field_string。当全部字符串字段设为sql_attr_string时不能建立索引，而随便注释一条sql_attr_string，或者选择一条sql_attr_string变为sql_field_string，就可以了 如果数据库更新了，需要重新建立索引，重输一遍上面简历索引的指令就行 如果重建索引时守护进程正在运行，会报错，需要运行下面的指令，会重建索引并且重开守护进程现在进行php和sphinx的交互： 到http://pecl.php.net/package/sphinx下载php的sphinx模块，放到php中引用起来，方法不在此赘述 vim test.php $sphinx = new SphinxClient; //sphinx的主机名和端口 $sphinx-&gt;SetServer ( ‘192.168.1.168’, 9412 ); $sphinx-&gt;SetConnectTimeout ( 1 ); //设置返回结果集为php数组格式$sphinx-&gt;SetArrayResult ( true ); //匹配结果的偏移量，参数的意义依次为：起始位置，返回结果条数，最大匹配条数 $sphinx-&gt;SetLimits(0, 20, 1000); //最大搜索时间 $sphinx-&gt;SetMaxQueryTime(10); //索引源是配置文件中的 index 类，如果有多个索引源可使用,号隔开：’email,diary’ 或者使用’*’号代表全部索引源 $index = ‘message1’; //搜索关键字 $result = $sphinx-&gt;Query ( ‘你要搜索的非中文/中文字串’, “*” ); if (!$result){ print_r($sphinx-&gt;getLastError());} print_r($result); 现在来讲coreseek的安装配置： 把包下载下来，我下载的地址是http://files.opstool.com/man/coreseek-4.1-beta.tar.gz 安装过程可以参考官网文档http://www.coreseek.cn/products-install/install_on_bsd_linux/ 我直接复制过来，照着打命令就可以了 ##前提：需提前安装操作系统基础开发库及mysql依赖库以支持mysql数据源和xml数据源 ##安装mmseg $ cd mmseg-3.2.14 $ ./bootstrap #输出的warning信息可以忽略，如果出现error则需要解决 $ ./configure –prefix=/usr/local/mmseg3 $ make &amp;&amp; make install $ cd .. ##安装coreseek $ cd csft-3.2.14 或者 cd csft-4.0.1 或者 cd csft-4.1 $ sh buildconf.sh #输出的warning信息可以忽略，如果出现error则需要解决 $ ./configure –prefix=/usr/local/coreseek –without-unixodbc –with-mmseg –with-mmseg-includes=/usr/local/mmseg3/include/mmseg/ –with-mmseg-libs=/usr/local/mmseg3/lib/ –with-mysql ##如果提示mysql问题，可以查看MySQL数据源安装说明 $ make &amp;&amp; make install $ cd .. 安装coreseek的时候，发现编辑的的时候总是出错 /root/coreseek-4.1-beta/csft-4.1/src/sphinx.cpp:22292: undefined reference to libiconv_open&#39; /root/coreseek-4.1-beta/csft-4.1/src/sphinx.cpp:22310: undefined reference tolibiconv’ /root/coreseek-4.1-beta/csft-4.1/src/sphinx.cpp:22316: undefined reference to libiconv_close&#39; collect2: ld returned 1 exit status make[2]: *** [indexer] Error 1 make[2]: Leaving directory/root/coreseek-4.1-beta/csft-4.1/src’ make[1]: [all] Error 2 make[1]: Leaving directory `/root/coreseek-4.1-beta/csft-4.1/src’ make: [all-recursive] Error 1 在其它机器上未发现此错误. 一开始以为libiconv的问题，又重装了几次还是一样，最后终于找着办法了 编辑： ./src/MakeFile文件 将 LIBS = -lm -lexpat -L/usr/local/lib 改成 LIBS = -lm -lexpat -liconv -L/usr/local/lib 就可以了。 这样就算装好了接下来同样是配置，和sphinx有些不一样 同样是参考官网文档http://www.coreseek.cn/products-install/coreseek_mmseg/ #以下部分为中文分词核心配置 #stopwords = /path/to/stowords.txt的位置 charset_dictpath = /usr/local/mmseg3/etc/ charset_type = zh_cn.utf-8 #charset_table = ……………….. #需将原有 的该配置注释掉 ngram_len = 0 #以上部分为中文分词核心配置 关键在于： #必须设置，表示词典文件的目录，该目录下必须有uni.lib词典文件存在 charset_dictpath=/usr/local/mmseg3/etc/ #必须设置，表示启用中文分词功能；否则中文分词功能无效，使用sphinx的其他处理模式 charset_type=zh_cn.utf-8 #必须设置，表示取消原有的一元字符切分模式，不使其对中文分词产生干扰 ngram_len=0 #charset_table的配置需要注释掉！ #charset_table=…… 我的配置是 source message1{ type = mysql sql_host = 127.0.0.1 sql_user = root sql_pass = 123456 sql_db = yh_comment sql_port = 3308 # optional, default is 3306 sql_query_pre = SET NAMES utf8 sql_query_pre = SET SESSION query_cache_type=OFF sql_query = \ SELECT id,bid,uid,content,valid,createtime FROM tbl_cmt00 sql_attr_uint = uid sql_query_info = SELECT * FROM tbl_cmt00 WHERE id=$id } index message1{ source = message1 path = /usr/local/coreseek/var/data/message1 docinfo = extern charset_type = zh_cn.utf-8 ngram_len = 0 charset_dictpath = /usr/local/mmseg3/etc/} indexer{ mem_limit = 32M} searchd{ port = 9512 log = /usr/local/coreseek/var/log/searchd-message1.log query_log = /usr/local/coreseek/var/log/query-message1.log read_timeout = 5 max_children = 30 pid_file = /usr/local/coreseek/var/log/searchd-message1.pid max_matches = 1000 seamless_rotate = 1 preopen_indexes = 0 unlink_old = 1} 现在可以尝试搜索 更新索引 /usr/local/coreseek/bin/indexer -c /usr/local/coreseek/etc/test.conf –all 测试搜索 /usr/local/coreseek/bin/search -c /usr/local/coreseek/etc/test.conf 你要搜索的字符串 强行关闭 killall -9 searchd 启动 /usr/local/coreseek/bin/searchd -c /usr/local/coreseek/etc/test.conf 结果应该是类似： displaying matches: document=4, weight=5, uid=3046690id=4 bid=3046730-4e842acdcf8be uid=3046690 content=?????????? valid=y createtime=1317286728 words: ‘没有’: 683 documents, 700 hits ‘听’: 124 documents, 134 hits ‘过’: 722 documents, 741 hits ‘，’: 9797 documents, 11936 hits ‘过来’: 47 documents, 47 hits ‘一下’: 404 documents, 404 hitscoreseek和php的交互 总的来说和sphinx的交互几乎是一样的 用的是pecl的sphinx模块的话，可能$result会返回false，使用getLastError()方法会返回 client version is higher than daemon version 这样的错误可以禁用pecl的sphinx模块，转而使用coreseek包中提供的sphinxapi.php不然无法使用coreseek呢 ls /usr/local/coreseek/api/*.php sphinxapi.phptest2.phptest_coreseek.phptest.php test*.php都是demo，可以作为参考 自己写个test.php vim test.php include ‘./sphinxapi.php’; $sphinx-&gt;SetServer ( ‘192.168.1.168’, 9512 );$sphinx-&gt;SetArrayResult ( true ); $index = ‘message1’; $result = $sphinx-&gt;Query ( ‘搜索关键字’, “*” ); if (!$result){ print_r($sphinx-&gt;getLastError());} print_r($result); 其他的和sphinx一样]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>coreseek</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[重启crontab服务]]></title>
    <url>%2F2014%2F09%2F25%2F%E9%87%8D%E5%90%AFcrontab%E6%9C%8D%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[1234#停止/etc/init.d/cron stop*启动/etc/init.d/cron start]]></content>
  </entry>
  <entry>
    <title><![CDATA[开源爬虫: Heritrix 3.1 Windows 上安装/使用]]></title>
    <url>%2F2014%2F09%2F13%2F%E5%BC%80%E6%BA%90%E7%88%AC%E8%99%AB-Heritrix-3-1-Windows-%E4%B8%8A%E5%AE%89%E8%A3%85-%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[目前 Heritrix 的最新版本是 3.1.0（2011-10-21 发布） http://blog.sina.com.cn/s/blog_5f54f0be0101hcy8.html 讲了 1.14.4 版本的安装和使用http://blog.sina.com.cn/s/blog_5f54f0be0101hcyd.html讲了如何扩展 1.14.4 版本其中的模块本文讲如何安装和使用 Heritrix 最新的 3.1.0 版下载：http://sourceforge.net/projects/archive-crawler/files/heritrix3/3.1.0/在 Eclipse 中的配置首先在 Eclipse 中新建 Java 工程MyHeritrix3。然后利用下载的源代码包根据以下步骤来配置这个工程。1. 导入类库Heritrix 所用到的工具类库都在 heritrix-3.1.0-dist.zip 的 lib 目录下，需要将其导入MyHeritrix3 工程。1）将 heritrix-3.1.0-dist 下的 lib 文件夹拷贝到 MyHeritrix3 项目根目录；2）在 MyHeritrix3 工程上右键单击选择“Build Path -&gt; Configure BuildPath …”，然后选择 Library 选项卡，单击“Add JARs …”。3）在弹出的“JAR Selection”对话框中选择 MyHeritrix3 工程 lib 文件夹下所有的 jar文件，然后点击 OK 按钮。2. 拷贝源代码将 heritrix-3.1.0enginesrcmainjava添加到Eclipse的src目录，以及：heritrix-3.1.0commonssrcmainjava 目录 和heritrix-3.1.0modulessrcmainjava 目录。这样你就可以删除heritrix-commons-3.1.0.jar，heritrix-engine-3.1.0.jar，heritrix-modules-3.1.0.jar三个包的引用，直接使用源代码运行。3、运行Heritrix 3.1在 MyHeritrix 工程上右键单击选择“Run As -&gt; Run Configurations”，选择Java Application, 确保 Main 选项卡中的 Project 和 Main class 选项内容正确，其中的Name 参数可以设置为任何方便识别的名字。在 argument 项中设置启动参数-a admin:admin（输入启动账号），如下图：然后运行Heritrix.java，如果一切正常, eclipse 运行结果如图:可以看到程序已经在 8443 端口运行.你可以通过：https://localhost:8443 访问Heritrix 3.1的管理端。要注意是 https ,不是 http打开页面后会提示输入用户名和密码,输入 admin, admin4、建立和配置抓取任务登录管理控制台（用户名admin密码admin），在管理界面首页找到如下图这个位置：输入一个名称（如 test）,然后点击“Create”按钮。这时候根据默认模版生成了一个抓取任务，但还不能抓取任何东西，我们需要通过配置文件的修改告诉服务器，我们要抓取什么。在管理控制台的Job Directories中选择要配置的job（下图中myjob）点击 myjob, 进入myjob的管理界面，如下图：点击 edit 按钮，开始编辑配置文件，配置需要修改的地方如下图所示，先从简单的做起：配置1和3的配置内容是一样的，operatorContactUrl写成 http://localhost,jobName和description随便写点东西即可。配置2则是配置搜索种子网站的列表，我这里先写了一个http://www.sina.com.cn,先抓取新浪网站试试。点击最上面的“Save changes”保存所有的配置文件。这三个地方配置好就可以运行这个抓取任务试试了。这时候需要执行如下操作（回到myjob的配置界面），让任务运行起来：1）点击“build”编译当前的配置。2）点击“launch”按钮运行当前任务至挂起状态，如果job已经运行，则先点击“teardown”按钮；3）这时任务处于挂起状态，点击“unpause”即立即启动任务。如果系统正常运行，会有如下类似提示信息：在项目的jobstest20131226062239warcs目录下有一个逐步增大的文件，这就是抓取下来的网页。&nbsp;如果要看到每个抓取的页面，可以将配置文件的warcWriter这个bean的class改为org.archive.modules.writer.MirrorWriterProcessor，这样就下载的网页是以镜像文件的形式保存在，一般存放在项目根目录下的mirror目录下。这种方式是较刻板的.因为它是直接将warcWriter bean 的 class改了，但里面的属性还是之前类的。如果把属性的注释打开，会报错，因为 MirrorWriterProcessor 没有那些property, 所以最好是自己再定义一个 bean. 然后在配置中引用它：定义上面三个 bean. 然后再在&nbsp;dispositionProcessors 中将processors 的引用改成 mirrorWriter:]]></content>
      <categories>
        <category>java爬虫</category>
      </categories>
      <tags>
        <tag>heritrix3.1</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js中的replace说明]]></title>
    <url>%2F2014%2F09%2F02%2Fjs%E4%B8%AD%E7%9A%84replace%E8%AF%B4%E6%98%8E%2F</url>
    <content type="text"><![CDATA[var str = “this is a test”; alert(str.replace(“this”, “that”)); 很明显会输出:that is a test 接着再看一个例子: var str = “this is a test-this is a test”; alert(str.replace(“this”, “that”)); 这个会是什么结果呢？ 可见，结果是:that is a test-this is a test 因此，只是替换了第一个this，为什么呢？先来看看replace方法的相关说明吧： stringObject.replace(regexp,replacement) 字符串 stringObject 的 replace() 方法执行的是查找并替换的操作。它将在 stringObject 中查找与 regexp 相匹配的子字符串，然后用 replacement 来替换这些子串。如果 regexp 具有全局标志 g，那么 replace() 方法将替换所有匹配的子串。否则，它只替换第一个匹配子串。 所以如果想替换所有匹配的子串可以稍稍改下上面的例子: var str = “this is a test-this is a test”; alert(str.replace(/this/g, “that”)); 结果为:that is a test-that is a test]]></content>
      <categories>
        <category>js函数</category>
      </categories>
      <tags>
        <tag>replace</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[php时间增加， 可增加天 年 月]]></title>
    <url>%2F2014%2F09%2F01%2Fphp%E6%97%B6%E9%97%B4%E5%A2%9E%E5%8A%A0%EF%BC%8C-%E5%8F%AF%E5%A2%9E%E5%8A%A0%E5%A4%A9-%E5%B9%B4-%E6%9C%88%2F</url>
    <content type="text"><![CDATA[&lt;?php $date1 = “2011-08-09”;echo date(‘Y-m-d’,strtotime(“$date1 +5 day”));// 相应地,要增加月,年,将day改成month或year即可 ? 输出结果：2011-08-14 +++++++++++++ 今天、昨天、明天 、上一周、下一周 +++++++++++++++ ?&gt;]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>time</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Highcharts详解各类标签]]></title>
    <url>%2F2014%2F08%2F27%2Fdfdfd%2F</url>
    <content type="text"><![CDATA[Highcharts是一个制作图表的纯Javascript类库，主要特性如下： 兼容性：兼容当今所有的浏览器，包括iPhone、IE和火狐等等； 对个人用户完全免费； 纯JS，无BS； 支持大部分的图表类型：直线图，曲线图、区域图、区域曲线图、柱状图、饼装图、散布图； 跨语言：不管是PHP、Asp.net还是Java都可以使用，它只需要三个文件：一个是Highcharts的核心文件highcharts.js，还有a canvas emulator for IE和Jquery类库或者MooTools类库； 提示功能：鼠标移动到图表的某一点上有提示信息； 放大功能：选中图表部分放大，近距离观察图表； 易用性：无需要特殊的开发技能，只需要设置一下选项就可以制作适合自己的图表； 时间轴：可以精确到毫秒； Highcharts 官网：http://www.highcharts.com Highcharts 官网示例：http://www.highcharts.com/demo/ Highcharts 官网文档：http://www.highcharts.com/documentation/how-to-use Highcharts提供大量的选项配置参数，您可以轻松定制符合用户要求的图表，目前官网只提供英文版的开发配置说明文档，而中文版的文档网上甚少，且零散不全。这里，我把Highcharts常用的最核心的参数选项配置整理成文档，与大家分享。Chart：图表区选项 Chart图表区选项用于设置图表区相关属性。参数 描述 默认值backgroundColor 设置图表区背景色 #FFFFFFborderWidth 设置图表边框宽度 0borderRadius 设置图表边框圆角角度 5renderTo 图表放置的容器，一般在html中放置一个DIV，获取DIV的id属性值 nulldefaultSeriesType 默认图表类型line, spline, area, areaspline, column, bar, pie , scatter 0width 图表宽度，默认根据图表容器自适应宽度 nullheight 图表高度，默认根据图表容器自适应高度 nullmargin 设置图表与其他元素之间的间距，数组，如[0,0,0,0] [null]plotBackgroundColor 主图表区背景色，即X轴与Y轴围成的区域的背景色 nullplotBorderColor 主图表区边框的颜色，即X轴与Y轴围成的区域的边框颜色 nullplotBorderWidth 主图表区边框的宽度 0shadow 是否设置阴影，需要设置背景色backgroundColor。 falsereflow 是否自使用图表区域高度和宽度，如果没有设置width和height时，会自适应大小。 truezoomType 拖动鼠标进行缩放，沿x轴或y轴进行缩放，可以设置为：’x’,’y’,’xy’ ‘’events 事件回调，支持addSeries方法，click方法，load方法，selection方法等的回调函数。Color：颜色选项 Color颜色选项用于设置图表的颜色方案。参数 描述 默认值color 用于展示图表，折线/柱状/饼状等图的颜色，数组形式。 array Highcharts已经默认提供了多种颜色方案，当要显示的图形多于颜色种类时，多出的图形会自动从第一种颜色方案开始选取。自定义颜色方案的方法： Highcharts.setOptions({ colors: [‘#058DC7’, ‘#50B432’, ‘#ED561B’, ‘#DDDF00’, ‘#24CBE5’, ‘#64E572’, ‘#FF9655’,‘#FFF263’, ‘#6AF9C4’]}); Title：标题选项 Title标题选项用于设置图表的标题相关属性。参数 描述 默认值text 标题文本内容。 Chart titlealign 水平对齐方式。 centerverticalAlign 垂直对齐方式。 topmargin 标题与副标题之间或者主图表区间的间距。 15floating 是否浮动，如果为true，则标题可以偏离主图表区，可配合x,y属性使用。 falsestyle 设置CSS样式。 {color: ‘#3E576F’,fontSize: ‘16px’}Subtitle：副标题选项 副标题提供的属性选项与标题title大致相同，可参照上述标题选项，值得一提的是副标题的text选项默认为’’，即空的，所以默认情况下副标题不显示。xAxis：X轴选项 X轴选项用于设置图表X轴相关属性。参数 描述 默认值categories 设置X轴分类名称，数组，例如：categories: [‘Apples’, ‘Bananas’, ‘Oranges’] []title X轴名称，支持text、enabled、align、rotation、style等属性labels 设置X轴各分类名称的样式style，格式formatter，角度rotation等。 arraymax X轴最大值(categories为空时)，如果为null，则最大值会根据X轴数据自动匹配一个最大值。 nullmin X轴最小值(categories为空时)，如果为null，则最小值会根据X轴数据自动匹配一个最小值。 arraygridLineColor 网格（竖线）颜色 #C0C0C0gridLineWidth 网格(竖线)宽度 1lineColor 基线颜色 #C0D0E0lineWidth 基线宽度 0yAxis：Y轴选项 Y轴选项与上述xAxis选项基本一致，请参照上表中的参数设置，不再单独列出。Series：数据列选项 数据列选项用于设置图表中要展示的数据相关的属性。参数 描述 默认值data 显示在图表中的数据列，可以为数组或者JSON格式的数据。如：data:[0, 5, 3, 5]，或data: [{name: ‘Point 1’,y: 0}, {name: ‘Point 2’,y: 5}] ‘’name 显示数据列的名称。 ‘’type 数据列类型，支持 area, areaspline, bar, column, line, pie, scatter or spline lineplotOptions：数据点选项 plotOptions用于设置图表中的数据点相关属性。plotOptions根据各种图表类型，其属性设置略微有些差异，现将常用选项列出来。参数 描述 默认值enabled 是否在数据点上直接显示数据 falseallowPointSelect 是否允许使用鼠标选中数据点 falseformatter 回调函数，格式化数据显示内容 formatter: function() {return this.y;}Tooltip：数据点提示框 Tooltip用于设置当鼠标滑向数据点时显示的提示框信息。参数 描述 默认值enabled 是否显示提示框 truebackgroundColor 设置提示框的背景色 rgba(255, 255, 255, .85)borderColor 提示框边框颜色，默认自动匹配数据列的颜色 autoborderRadius 提示框圆角度 5shadow 是否显示提示框阴影 truestyle 设置提示框内容样式，如字体颜色等 color:’#333’formatter 回调函数，用于格式化输出提示框的显示内容。返回的内容支持html标签如：, , , ,, 2Legend：图例选项 legend用于设置图例相关属性。参数 描述 默认值layout 显示形式，支持水平horizontal和垂直vertical horizontalalign 对齐方式。 centerbackgroundColor 图例背景色。 nullborderColor 图例边框颜色。 #909090borderRadius 图例边框角度 5enabled 是否显示图例 truefloating 是否可以浮动，配合x，y属性。 falseshadow 是否显示阴影 falsestyle 设置图例内容样式itemStyle: {fontSize:’15px’} var chart; var options = { chart: { renderTo: &apos;container&apos;, type: &apos;line&apos;, marginRight: 130, marginBottom: 25 }, title: { text: &apos;统计情况&apos;, x: -20 //center }, xAxis: { categories: date }, yAxis: { title: { text: &apos;&apos; }, plotLines: [{ value: 0, width: 1, color: &apos;#808080&apos; }] }, tooltip: { formatter: function() { return &apos;&apos;+ this.series.name +&apos; ‘ + this.x +’: ‘+ this.y ; } },exporting:{ enabled:false },//去掉下载和打印 credits: { enabled: false }, //去掉右下角官网图标 legend: { layout: ‘vertical’, align: ‘right’, verticalAlign: ‘top’, x: -10, y: 100, borderWidth: 0 }, series: [] } options.series = new Array(); options.series[0] = new Object(); options.series[0].name = ‘Sample’; options.series[0].data = data_val; chart = new Highcharts.Chart(options);]]></content>
      <categories>
        <category>js插件</category>
      </categories>
      <tags>
        <tag>highcharts标签</tag>
      </tags>
  </entry>
</search>
